
=== Sheet Bindings =====================================

 -- Row 1 -----------------------------------
  Binding Name = TestOperationType
  Binding = value set
  Reference = valueset-testscript-operation-codes
  Definition = The allowable operation types.
  Description = FHIR Operation Types
  Conformance = extensible

 -- Row 2 -----------------------------------
  Binding Name = !FHIRDefinedType
  Binding = value set
  Reference = http://hl7.org/fhir/defined-types
  Definition = FHIR Defined Types
  Description = FHIR Defined Types
  Conformance = example
  Uri = http://hl7.org/fhir/defined-types

 -- Row 3 -----------------------------------
  Binding Name = ContentType
  Binding = code list
  Reference = #content-type
  Definition = The content or mime type.
  Description = The content type or mime type to be specified in Accept or Content-Type header.
  Conformance = required

 -- Row 4 -----------------------------------
  Binding Name = AssertionDirectionType
  Binding = code list
  Reference = #assert-direction-codes
  Definition = The type of direction to use for assertion.
  Description = The direction to use for assertions.
  Conformance = required

 -- Row 5 -----------------------------------
  Binding Name = AssertionOperatorType
  Binding = code list
  Reference = #assert-operator-codes
  Definition = The type of operator to use for assertion.
  Description = The type of operator to use for assertions.
  Conformance = required

 -- Row 6 -----------------------------------
  Binding Name = AssertionResponseTypes
  Binding = code list
  Reference = #assert-response-code-types
  Definition = The type of response code to use for assertion.
  Description = The response code to expect in the response.
  Conformance = required

=== Sheet content-type =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = xml
  Display = xml
  Definition = XML content-type corresponding to the application/xml+fhir mime-type

 -- Row 2 -----------------------------------
  Id = 2
  Code = json
  Display = json
  Definition = JSON content-type corresponding to the application/json+fhir mime-type

=== Sheet assert-direction-codes =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = response
  Display = response
  Definition = Default value. Assertion is evaluated on the response.

 -- Row 2 -----------------------------------
  Id = 2
  Code = request
  Display = request
  Definition = Not equals comparison.

=== Sheet assert-operator-codes =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = equals
  Display = equals
  Definition = Default value. Equals comparison.

 -- Row 2 -----------------------------------
  Id = 2
  Code = notEquals
  Display = notEquals
  Definition = Not equals comparison.

 -- Row 3 -----------------------------------
  Id = 3
  Code = in
  Display = in
  Definition = Compare value within a known set of values.

 -- Row 4 -----------------------------------
  Id = 4
  Code = notIn
  Display = notIn
  Definition = Compare value not within a known set of values.

 -- Row 5 -----------------------------------
  Id = 5
  Code = greaterThan
  Display = greaterThan
  Definition = Compare value to be greater than a known value.

 -- Row 6 -----------------------------------
  Id = 6
  Code = lessThan
  Display = lessThan
  Definition = Compare value to be less than a known value.

 -- Row 7 -----------------------------------
  Id = 7
  Code = empty
  Display = empty
  Definition = Compare value is empty.

 -- Row 8 -----------------------------------
  Id = 8
  Code = notEmpty
  Display = notEmpty
  Definition = Compare value is not empty.

 -- Row 9 -----------------------------------
  Id = 9
  Code = contains
  Display = contains
  Definition = Compare value string contains a known value.

 -- Row 10 -----------------------------------
  Id = 10
  Code = notContains
  Display = notContains
  Definition = Compare value string does not contain a known value.

=== Sheet assert-response-code-types =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = okay
  Display = okay
  Definition = Response code is 200.

 -- Row 2 -----------------------------------
  Id = 2
  Code = created
  Display = created
  Definition = Response code is 201.

 -- Row 3 -----------------------------------
  Id = 3
  Code = noContent
  Display = noContent
  Definition = Response code is 204.

 -- Row 4 -----------------------------------
  Id = 4
  Code = notModified
  Display = notModified
  Definition = Response code is 304.

 -- Row 5 -----------------------------------
  Id = 5
  Code = bad
  Display = bad
  Definition = Response code is 400.

 -- Row 6 -----------------------------------
  Id = 6
  Code = forbidden
  Display = forbidden
  Definition = Response code is 403.

 -- Row 7 -----------------------------------
  Id = 7
  Code = notFound
  Display = notFound
  Definition = Response code is 404.

 -- Row 8 -----------------------------------
  Id = 8
  Code = methodNotAllowed
  Display = methodNotAllowed
  Definition = Response code is 405.

 -- Row 9 -----------------------------------
  Id = 9
  Code = conflict
  Display = conflict
  Definition = Response code is 409.

 -- Row 10 -----------------------------------
  Id = 10
  Code = gone
  Display = gone
  Definition = Response code is 410.

 -- Row 11 -----------------------------------
  Id = 11
  Code = preconditionFailed
  Display = preconditionFailed
  Definition = Response code is 412.

 -- Row 12 -----------------------------------
  Id = 12
  Code = unprocessable
  Display = unprocessable
  Definition = Response code is 422.

=== Sheet Invariants =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Context = TestScript.setup.action
  English = Setup action SHALL contain either an operation or assert but not both.
  XPath = (f:operation or f:assert) and not(f:operation and f:assert)

 -- Row 2 -----------------------------------
  Id = 2
  Context = TestScript.test.action
  English = Test action SHALL contain either an operation or assert but not both.
  XPath = (f:operation or f:assert) and not(f:operation and f:assert)

 -- Row 3 -----------------------------------
  Id = 3
  Context = TestScript.teardown.action
  English = Teardown action SHALL contain an operation.
  XPath = f:operation

 -- Row 4 -----------------------------------
  Id = 4
  Context = TestScript.variable
  English = Variable cannot contain both headerField and path.
  XPath = not(f:headerField and f:path)

 -- Row 5 -----------------------------------
  Id = 5
  Context = TestScript.metadata
  English = TestScript metadata capability SHALL contain required or validated or both.
  XPath = f:capability/f:required or f:capability/f:validated or (f:capability/f:required and f:capability/f:validated)

 -- Row 6 -----------------------------------
  Id = 6
  Context = TestScript.setup.metadata
  English = Setup metadata capability SHALL contain required or validated or both.
  XPath = f:capability/f:required or f:capability/f:validated or (f:capability/f:required and f:capability/f:validated)

 -- Row 7 -----------------------------------
  Id = 7
  Context = TestScript.test.metadata
  English = Test metadata capability SHALL contain required or validated or both.
  XPath = f:capability/f:required or f:capability/f:validated or (f:capability/f:required and f:capability/f:validated)

 -- Row 8 -----------------------------------
  Id = 8
  Context = TestScript.setup.action.assert
  English = Only a single assertion SHALL be present within setup action assert element.
  XPath = count(f:contentType) + count(f:headerField) + count(f:minimumId) + count(f:navigationLinks) + count(f:path) + count(f:resource) + count(f:responseCode) + count(f:response) + count(f:validateProfileId)  <=1

 -- Row 9 -----------------------------------
  Id = 9
  Context = TestScript.test.action.assert
  English = Only a single assertion SHALL be present within test action assert element.
  XPath = count(f:contentType) + count(f:headerField) + count(f:minimumId) + count(f:navigationLinks) + count(f:path) + count(f:resource) + count(f:responseCode) + count(f:response) + count(f:validateProfileId)  <=1

 -- Row 10 -----------------------------------
  Id = 10
  Context = TestScript.setup.action.operation
  English = Setup operation SHALL contain either sourceId or targetId or params or url.
  XPath = f:sourceId or ((f:targetId or f:url or f:params) and (count(f:targetId) + count(f:url) + count(f:params) =1)) or (f:type/f:code/@value=\'conformance\' or f:type/f:code/@value=\'search\' or f:type/f:code/@value=\'transaction\' or f:type/f:code/@value=\'history\')

 -- Row 11 -----------------------------------
  Id = 11
  Context = TestScript.test.action.operation
  English = Test operation SHALL contain either sourceId or targetId or params or url.
  XPath = f:sourceId or (f:targetId or f:url or f:params) and (count(f:targetId) + count(f:url) + count(f:params) =1) or (f:type/f:code/@value=\'conformance\' or f:type/f:code/@value=\'search\' or f:type/f:code/@value=\'transaction\' or f:type/f:code/@value=\'history\')

 -- Row 12 -----------------------------------
  Id = 12
  Context = TestScript.teardown.action.operation
  English = Teardown operation SHALL contain either sourceId or targetId or params or url.
  XPath = f:sourceId or (f:targetId or f:url or (f:params and f:resource)) and (count(f:targetId) + count(f:url) + count(f:params) =1) or (f:type/f:code/@value=\'conformance\' or f:type/f:code/@value=\'search\' or f:type/f:code/@value=\'transaction\' or f:type/f:code/@value=\'history\')

 -- Row 13 -----------------------------------
  Id = 13
  Context = TestScript.setup.action.assert
  English = Setup action assert shall contain both compareToSourceId and compareToSourcePath or neither.
  XPath = (f:compareToSourceId and f:compareToSourcePath) or not(f:compareToSourceId or f:compareToSourcePath)

 -- Row 14 -----------------------------------
  Id = 14
  Context = TestScript.test.action.assert
  English = Test action assert shall contain both compareToSourceId and compareToSourcePath or neither.
  XPath = (f:compareToSourceId and f:compareToSourcePath) or not(f:compareToSourceId or f:compareToSourcePath)

 -- Row 15 -----------------------------------
  Id = 15
  Context = TestScript
  English = Operations SHALL be present in TestScript.setup.action, TestScript.test.action and TestScript.teardown.action only.
  XPath = not(f:operation)

 -- Row 16 -----------------------------------
  Id = 16
  Context = TestScript
  English = Assertions SHALL be present in TestScript.setup.action and TestScript.test.action only.
  XPath = not(f:assert)

=== Sheet Data Elements =====================================

 -- Row 1 -----------------------------------
  Element = TestScript
  UML = 200;150
  Type = DomainResource
  Short Label = Describes a set of tests
  Definition = TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.
  w5 = conformance.misc

 -- Row 2 -----------------------------------
  Element = TestScript.url
  Card. = 1..1
  Aliases = url, authoritative-url, destination, identity
  Summary = Y
  Type = uri
  Short Label = Literal URL used to reference this TestScript
  Definition = An absolute URL that is used to identify this Test Script. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this Test Script is (or will be) published
  w5 = id

 -- Row 3 -----------------------------------
  Element = TestScript.version
  Card. = 0..1
  Summary = y
  Type = string
  Short Label = Logical id for this version of the TestScript
  Definition = The identifier that is used to identify this version of the TestScript. This is an arbitrary value managed by the TestScript author manually
  Requirements = There may be multiple resource versions of the TestScript that have this same identifier. The resource version id will change for technical reasons, whereas the stated version number needs to be under the author\'s control
  w5 = id.version

 -- Row 4 -----------------------------------
  Element = TestScript.name
  Card. = 1..1
  Summary = y
  Type = string
  Short Label = Informal name for this TestScript
  Definition = A free text natural language name identifying the TestScript
  Comments = Not expected to be globally unique

 -- Row 5 -----------------------------------
  Element = TestScript.status
  Card. = 1..1
  Is Modifier = yes
  Summary = y
  Type = code
  Binding = ConformanceResourceStatus
  Short Label = draft | active | retired
  Definition = The status of the TestScript
  Requirements = Allows filtering of TestScripts that are appropriate for use vs. not
  w5 = status

 -- Row 6 -----------------------------------
  Element = TestScript.identifier
  Card. = 0..1
  Summary = y
  Type = Identifier
  Short Label = External identifier
  Definition = Identifier for the TestScript assigned for external purposes outside the context of FHIR.
  w5 = id

 -- Row 7 -----------------------------------
  Element = TestScript.experimental
  Card. = 0..1
  Summary = y
  Type = boolean
  Short Label = If for testing purposes, not real usage
  Definition = This TestScript was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage
  Requirements = Allows filtering of TestScripts that are appropriate for use vs. not
  w5 = class

 -- Row 8 -----------------------------------
  Element = TestScript.publisher
  Card. = 0..1
  Summary = y
  Type = string
  Short Label = Name of the publisher (Organization or individual)
  Definition = The name of the individual or organization that published the Test Script
  Requirements = Helps establish the \"authority/credibility\" of the Test Script.  May also allow for contact
  Comments = Usually an organization, but may be an individual. This item SHOULD be populated unless the information is available from context.
  w5 = who.witness

 -- Row 9 -----------------------------------
  Element = TestScript.contact
  Card. = 0..*
  Summary = y
  UML = 0;80
  Short Label = Contact details of the publisher
  Definition = Contacts to assist a user in finding and communicating with the publisher
  Comments = May be a web site, an email address, a telephone number (tel:), etc.

 -- Row 10 -----------------------------------
  Element = TestScript.contact.name
  Card. = 0..1
  Summary = Y
  Type = string
  Short Label = Name of a individual to contact
  Definition = The name of an individual to contact regarding the Test Script
  Comments = If there is no named individual, the telecom is for the organization as a whole

 -- Row 11 -----------------------------------
  Element = TestScript.contact.telecom
  Card. = 0..*
  Summary = Y
  Type = ContactPoint
  Short Label = Contact details for individual or publisher
  Definition = Contact details for individual (if a name was provided) or the publisher

 -- Row 12 -----------------------------------
  Element = TestScript.date
  Card. = 0..1
  Summary = y
  Type = dateTime
  Short Label = Date for this version of the TestScript
  Definition = The date that this version of the TestScript was published. The date must change when the business version changes, if it does, and it must change if the status code changes. in addition, it should change when the substantiative content of the test cases change
  Comments = Additional specific dates may be added as extensions
  w5 = when.recorded

 -- Row 13 -----------------------------------
  Element = TestScript.description
  Card. = 0..1
  Summary = y
  Type = string
  Short Label = Natural language description of the TestScript
  Definition = A free text natural language description of the TestScript and its use
  Comments = This field can be used for things such as why the TestScript was written, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc.  It is *not* a rendering of the TestScript as conveyed in TestScript.text. This item SHOULD be populated unless the information is available from context

 -- Row 14 -----------------------------------
  Element = TestScript.useContext
  Card. = 0..*
  Summary = y
  Type = CodeableConcept
  Binding = ConformanceUseContext
  Short Label = Content intends to support these contexts
  Definition = The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of Test Scripts.
  Requirements = Assist in searching for appropriate content

 -- Row 15 -----------------------------------
  Element = TestScript.requirements
  Card. = 0..1
  Type = string
  Short Label = Scope and Usage this Test Script is for
  Definition = Explains why this Test Script is needed and why it\'s been constrained as it has
  Comments = This element does not describe the usage of the Test Script (that\'s done in comments), rather it\'s for traceability of *why* the element is either needed or why the constraints exist as they do.  This may be used to point to source materials or specifications that drove the structure of this data element
  w5 = why

 -- Row 16 -----------------------------------
  Element = TestScript.copyright
  Card. = 0..1
  Aliases = License,Restrictions
  Type = string
  Short Label = Use and/or Publishing restrictions
  Definition = A copyright statement relating to the Test Script and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the constraints and mappings

 -- Row 17 -----------------------------------
  Element = TestScript.metadata
  Card. = 0..1
  UML = 300;0
  Short Label = Required capability that is assumed to function correctly on the FHIR server being tested
  Definition = The required capability must exist and is assumed to function correctly on the FHIR server being tested.

 -- Row 18 -----------------------------------
  Element = TestScript.metadata.link
  Card. = 0..*
  UML = 0;0
  Short Label = Links to the FHIR specification
  Definition = A link to the FHIR specification that this test is covering.

 -- Row 19 -----------------------------------
  Element = TestScript.metadata.link.url
  Card. = 1..1
  Type = uri
  Short Label = URL to the specification
  Definition = URL to a particular requirement or feature within the FHIR specification.

 -- Row 20 -----------------------------------
  Element = TestScript.metadata.link.description
  Card. = 0..1
  Type = string
  Short Label = Short description
  Definition = Short description of the link.

 -- Row 21 -----------------------------------
  Element = TestScript.metadata.capability
  Card. = 1..*
  UML = 500;0
  Short Label = Capabiltities that are assumed to function correctly on the FHIR server being tested
  Definition = Capabilties that must exist and is assumed to function correctly on the FHIR server being tested.
  Comments = When the metadata capabiltiies section is defined at TestScript.metadata or at TestScript.setup.metadata, and the server\'s conformance statement does not contain the elements defined in the minimal conformance statement, then all the tests in the TestScript are skipped.  When the metadata capabiltiies section is defined at TestScript.test.metadata and the server\'s conformance statement does not contain the elements defined in the minimal conformance statement, then only that test is skipped.  The \"metadata.capabilities.required\" and \"metadata.capabilities.validated\" elements only indicate whether the capabilities are the primary focus of the test script or not.  The do not impact the skipping logic.  Capabilities whose \"metadata.capabilities.validated\" flag is true are the primary focus of the test script.

 -- Row 22 -----------------------------------
  Element = TestScript.metadata.capability.required
  Card. = 0..1
  Type = boolean
  Short Label = Are the capabilities required?
  Definition = Whether or not the test execution will require the given capabilities of the server in order for this test script to execute.
  Default Value = False

 -- Row 23 -----------------------------------
  Element = TestScript.metadata.capability.validated
  Card. = 0..1
  Type = boolean
  Short Label = Are the capabilities validated?
  Definition = Whether or not the test execution will validate the given capabilities of the server in order for this test script to execute.
  Default Value = False

 -- Row 24 -----------------------------------
  Element = TestScript.metadata.capability.description
  Card. = 0..1
  Type = string
  Short Label = The expected capabilities of the server
  Definition = Description of the capabilities that this test script is requiring the server to support.

 -- Row 25 -----------------------------------
  Element = TestScript.metadata.capability.destination
  Card. = 0..1
  Type = integer
  Short Label = Which server these requirements apply to
  Definition = Which server these requirements apply to.

 -- Row 26 -----------------------------------
  Element = TestScript.metadata.capability.link
  Card. = 0..*
  Type = uri
  Short Label = Links to the FHIR specification
  Definition = Links to the FHIR specification that describes this interaction and the resources involved in more detail.

 -- Row 27 -----------------------------------
  Element = TestScript.metadata.capability.conformance
  Card. = 1..1
  Type = Reference(Conformance)
  Short Label = Required Conformance
  Definition = Minimum conformance required of server for test script to execute successfully.   If server does not meet at a minimum the reference conformance definition, then all tests in this script are skipped.
  Comments = The conformance statement of the server has to contain at a mininum the contents of the reference pointed to by this element.

 -- Row 28 -----------------------------------
  Element = TestScript.multiserver
  Card. = 0..1
  Type = boolean
  Short Label = Whether or not the tests apply to more than one FHIR server
  Definition = If the tests apply to more than one FHIR server (e.g. cross-server interoperability tests) then multiserver=true. Defaults to false if value is unspecified.
  Missing Meaning = False

 -- Row 29 -----------------------------------
  Element = TestScript.fixture
  Card. = 0..*
  UML = 550;150
  Short Label = Fixture in the test script - by reference (uri)
  Definition = Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.

 -- Row 30 -----------------------------------
  Element = TestScript.fixture.autocreate
  Card. = 0..1
  Type = boolean
  Short Label = Whether or not to implicitly create the fixture during setup
  Definition = Whether or not to implicitly create the fixture during setup. If true, the fixture is automatically created on each server being tested during setup, therefore no create operation is required for this fixture in the TestScript.setup section.
  Missing Meaning = False

 -- Row 31 -----------------------------------
  Element = TestScript.fixture.autodelete
  Card. = 0..1
  Type = boolean
  Short Label = Whether or not to implicitly delete the fixture during teardown
  Definition = Whether or not to implicitly delete the fixture during teardown If true, the fixture is automatically deleted on each server being tested during teardown, therefore no delete operation is required for this fixture in the TestScript.teardown section.
  Missing Meaning = False

 -- Row 32 -----------------------------------
  Element = TestScript.fixture.resource
  Card. = 0..1
  Type = Reference(Any)
  Short Label = Reference of the resource
  Definition = Reference to the resource (containing the contents of the resource needed for operations)
  Comments = See http://hl7-fhir.github.io/resourcelist.html for complete list of resource types.

 -- Row 33 -----------------------------------
  Element = TestScript.profile
  Card. = 0..*
  Type = Reference(Any)
  Short Label = Reference of the validation profile
  Definition = Reference to the profile to be used for validation.
  Comments = See http://hl7-fhir.github.io/resourcelist.html for complete list of resource types.

 -- Row 34 -----------------------------------
  Element = TestScript.variable
  Card. = 0..*
  UML = 560;410
  Short Label = Placeholder for evaluated elements
  Definition = Variable is set based either on element value in response body or on header field value in the response headers.
  Comments = Variables would be set based either on XPath/JsonPath expressions against fixtures (static and response), or headerField evaluations against response headers. If variable evaluates to nodelist or anything other than a primitive value, then test engine would report error.  Variables would be used to perform clean replacements in \"operation.params\", \"operation.requestHeader.value\", and \"operation.url\" element values during operation calls and in \"assert.value\" during assertion evaluations. This limits the places that test engines would need to look for placeholders \"${}\".  Variables are scoped to the whole script. They are NOT evaluated at declaration. They are evaluated by test engine when used for substitutions in \"operation.params\", \"operation.requestHeader.value\", and \"operation.url\" element values during operation calls and in \"assert.value\" during assertion evaluations.  See example testscript-search.xml.

 -- Row 35 -----------------------------------
  Element = TestScript.variable.name
  Card. = 1..1
  Type = string
  Short Label = Descriptive name for this variable
  Definition = Descriptive name for this variable
  Comments = Placeholders would contain the variable name wrapped in ${} in \"operation.params\", \"operation.requestHeader.value\", and \"operation.url\" elements.  These placeholders would need to be replaced by the variable value before the operation is executed.

 -- Row 36 -----------------------------------
  Element = TestScript.variable.headerField
  Card. = 0..1
  Type = string
  Short Label = HTTP header field name for source
  Definition = Will be used to grab the HTTP header field value from the headers that sourceId is pointing to.
  Comments = If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define both headerField and path.

 -- Row 37 -----------------------------------
  Element = TestScript.variable.path
  Card. = 0..1
  Type = string
  Short Label = XPath or JSONPath against the fixture body
  Definition = XPath or JSONPath against the fixture body.  When variables are defined, either headerField must be specified or path, but not both.
  Comments = If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define both headerField and path.

 -- Row 38 -----------------------------------
  Element = TestScript.variable.sourceId
  Card. = 0..1
  Type = id
  Short Label = Fixture Id of source expression or headerField within this variable
  Definition = Fixture to evaluate the XPath/JSONPath expression or the headerField  against within this variable.
  Comments = This can be a statically defined fixture (at the top of the testscript) or a dynamically set fixture created by responseId of the action.operation element.

 -- Row 39 -----------------------------------
  Element = TestScript.setup
  Card. = 0..1
  UML = 30;240
  Short Label = A series of required setup operations before tests are executed
  Definition = A series of required setup operations before tests are executed.

 -- Row 40 -----------------------------------
  Element = TestScript.setup.metadata
  Card. = 0..1
  Type = @TestScript.metadata
  Short Label = Capabiltities that are assumed to function correctly on the FHIR server being tested
  Definition = Capabilties that must exist and is assumed to function correctly on the FHIR server being tested.

 -- Row 41 -----------------------------------
  Element = TestScript.setup.action
  Card. = 1..*
  UML = 50;380
  Short Label = A setup operation or assert to perform
  Definition = Action would contain either an operation or an assertion.
  Comments = An action should contain either an operation or an assertion but not both.  It can contain any number of variables.

 -- Row 42 -----------------------------------
  Element = TestScript.setup.action.operation
  Card. = 0..1
  UML = 280;480
  Short Label = The setup operation to perform
  Definition = The operation to perform

 -- Row 43 -----------------------------------
  Element = TestScript.setup.action.operation.type
  Card. = 0..1
  Type = Coding
  Binding = TestOperationType
  Short Label = The setup operation type that will be executed
  Definition = Server interaction or operation type
  Comments = See http://hl7-fhir.github.io/http.html for list of server interactions

 -- Row 44 -----------------------------------
  Element = TestScript.setup.action.operation.resource
  Card. = 0..1
  Type = code
  Binding = FHIRDefinedType
  Short Label = Resource type
  Definition = The type of the resource.  See http://hl7-fhir.github.io/resourcelist.html.
  Comments = If \"url\" element is specified, then \"targetId\", \"params\", and \"resource\" elements will be ignored as \"url\" element will have everything needed for constructing the request url.  If \"params\" element is specified, then \"targetId\" element is ignored. For FHIR operations that require a resource (e.g. \"read\" and \"vread\" operations), the \"resource\" element must be specified when \"params\" element is specified.  If \"url\" and \"params\" elements are absent, then the request url will be constructed from \"targetId\" fixture if present. For \"read\" operation, the resource and id values will be extracted from \"targetId\" fixture and used to construct the url. For \"vread\" and \"history\" operations, the versionId value will also be used.

 -- Row 45 -----------------------------------
  Element = TestScript.setup.action.operation.label
  Card. = 0..1
  Type = string
  Short Label = Tracking/logging operation label
  Definition = The label would be used for tracking/logging purposes by test engines.
  Comments = This has no impact on the verification itself.

 -- Row 46 -----------------------------------
  Element = TestScript.setup.action.operation.description
  Card. = 0..1
  Type = string
  Short Label = Tracking/reporting operation description
  Definition = The description would be used by test engines for tracking and reporting purposes.
  Comments = This has no impact on the verification itself.

 -- Row 47 -----------------------------------
  Element = TestScript.setup.action.operation.accept
  Card. = 0..1
  Type = code
  Binding = ContentType
  Short Label = xml | json
  Definition = The content-type or mime-type to use for RESTful operation in the \'Accept\' header.
  Comments = If this is specified, then test engine shall set the \'Accept\' header to the corresponding value.    If \'xml\' is specified, then \'Accept\' header of \'application/xml+fhir\' will be set.  If \'json\' is specified, then \'application/json+fhir\' will be used.    If you\'d like to explicitly set the \'Accept\' to some other value then use the \'requestHeader\' element.
  Missing Meaning = xml

 -- Row 48 -----------------------------------
  Element = TestScript.setup.action.operation.contentType
  Card. = 0..1
  Type = code
  Binding = ContentType
  Short Label = xml | json
  Definition = The content-type or mime-type to use for RESTful operation in the \'Content-Type\' header.
  Comments = If this is specified, then test engine shall set the \'Content-Type\' header to the corresponding value.    If \'xml\' is specified, then \'Content-Type\' header of \'application/xml+fhir\' will be set.    If \'json\' is specified, then \'application/json+fhir\' will be used.    If you\'d like to explicitly set the \'Content-Type\' to some other value then use the \'requestHeader\' element.
  Missing Meaning = xml

 -- Row 49 -----------------------------------
  Element = TestScript.setup.action.operation.destination
  Card. = 0..1
  Type = integer
  Short Label = Which server to perform the operation on
  Definition = Which server to perform the operation on.
  Default Value = 0

 -- Row 50 -----------------------------------
  Element = TestScript.setup.action.operation.encodeRequestUrl
  Card. = 0..1
  Type = boolean
  Short Label = Whether or not to send the request url in encoded format
  Definition = Whether or not to implicitly send the request url in encoded format. The default is true to match the standard RESTful client behavior. Set to false when communicating with a server that does not support encoded url paths.
  Default Value = True

 -- Row 51 -----------------------------------
  Element = TestScript.setup.action.operation.params
  Card. = 0..1
  Type = string
  Short Label = Explicitly defined path parameters
  Definition = Path plus parameters after [type].  Used to set parts of the request URL explicitly.
  Comments = If \"url\" element is specified, then \"targetId\", \"params\", and \"resource\" elements will be ignored as \"url\" element will have everything needed for constructing the request url.  If \"params\" element is specified, then \"targetId\" element is ignored.  For FHIR operations that require a resource (e.g. \"read\" and \"vread\" operations), the \"resource\" element must be specified when \"params\" element is specified.  If \"url\" and \"params\" elements are absent, then the request url will be constructed from \"targetId\" fixture if present.  For \"read\" operation, the resource and id values will be extracted from \"targetId\" fixture and used to construct the url.  For \"vread\" and \"history\" operations, the versionId value will also be used.   Test engines would append whatever is specified for \"params\" to the URL after the resource type without tampering with the string (beyond encoding the URL for HTTP).  The \"params\" element does not correspond exactly to \"search parameters\".  Nor is it the \"path\".  It corresponds to the part of the URL that comes after the [type] (when \"resource\" element is specified). e.g. It corresponds to \"/[id]/_history/[vid] {?_format=[mime-type]}\" in the following operation: GET [base]/[type]/[id]/_history/[vid] {?_format=[mime-type]}  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before sending the request.

 -- Row 52 -----------------------------------
  Element = TestScript.setup.action.operation.requestHeader
  Card. = 0..*
  UML = 560;500
  Short Label = Each operation can have one ore more header elements
  Definition = Header elements would be used to set HTTP headers.
  Comments = This gives control to test-script writers to set headers explicitly based on test requirements.  It will allow for testing using:  - \"If-Modified-Since\" and \"If-None-Match\" headers.  See http://hl7-fhir.github.io/http.html#2.1.0.5.1 - \"If-Match\" header.  See http://hl7-fhir.github.io/http.html#2.1.0.11 - Conditional Create using \"If-None-Exist\".  See http://hl7-fhir.github.io/http.html#2.1.0.13.1 - Invalid \"Content-Type\" header for negative testing. - etc.

 -- Row 53 -----------------------------------
  Element = TestScript.setup.action.operation.requestHeader.field
  Card. = 1..1
  Type = string
  Short Label = HTTP header field name
  Definition = The HTTP header field e.g. \"Accept\"
  Comments = If header element is specified, then field is required.

 -- Row 54 -----------------------------------
  Element = TestScript.setup.action.operation.requestHeader.value
  Card. = 1..1
  Type = string
  Short Label = HTTP headerfield value
  Definition = The value of the header e.g. \"application/xml\"
  Comments = If header element is specified, then value is required.  No conversions will be done by Test Engine e.g. \"xml\" to \"application/xml+fhir\".  The values will be set in HTTP headers \"as-is\".  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before sending the request.

 -- Row 55 -----------------------------------
  Element = TestScript.setup.action.operation.responseId
  Card. = 0..1
  Type = id
  Short Label = Fixture Id of mapped response
  Definition = The fixture id (maybe new) to map to the response.
  Comments = If a responseId is supplied, and the server responds, then the resulting response (both headers and body) is mapped to the fixture ID (which may be entirely new and previously undeclared) designated by \"responseId\".  If responseId is not specified, it is the Test Engine\'s responsibility to store the response and use it as sourceId in subsequent assertions when assertion path and/or headerField is specified and sourceId is not specified.

 -- Row 56 -----------------------------------
  Element = TestScript.setup.action.operation.sourceId
  Card. = 0..1
  Type = id
  Short Label = Fixture Id of body for PUT and POST requests
  Definition = The id of the fixture used as the body of a PUT or POST request.

 -- Row 57 -----------------------------------
  Element = TestScript.setup.action.operation.targetId
  Card. = 0..1
  Type = id
  Short Label = Id of fixture used for extracting the [id],  [type], and [vid] for GET requests
  Definition = Id of fixture used for extracting the [id],  [type], and [vid] for GET requests
  Comments = If \"url\" element is specified, then \"targetId\", \"params\", and \"resource\" elements will be ignored as \"url\" element will have everything needed for constructing the request url.  If \"params\" element is specified, then \"targetId\" element is ignored.  For FHIR operations that require a resource (e.g. \"read\" and \"vread\" operations), the \"resource\" element must be specified when \"params\" element is specified.  If \"url\" and \"params\" elements are absent, then the request url will be constructed from \"targetId\" fixture if present.  For \"read\" operation, the resource and id values will be extracted from \"targetId\" fixture and used to construct the url.  For \"vread\" and \"history\" operations, the versionId value will also be used.

 -- Row 58 -----------------------------------
  Element = TestScript.setup.action.operation.url
  Card. = 0..1
  Type = string
  Short Label = Request URL
  Definition = Complete request URL.
  Comments = Used to set the request URL explicitly.  If \"url\" element is defined, then \"targetId\", \"resource\", and \"params\" elements will be ignored.  Test engines would use whatever is specified in \"url\" without tampering with the string (beyond encoding the URL for HTTP).  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before sending the request.

 -- Row 59 -----------------------------------
  Element = TestScript.setup.action.assert
  Card. = 0..1
  UML = 0;480
  Short Label = The assertion to perform
  Definition = Evaluates the results of previous operations to determine if the server under test behaves appropriately.
  Comments = In order to evaluate an assertion the request, response, and results of the most recently executed operation must always be maintained by the test engine.

 -- Row 60 -----------------------------------
  Element = TestScript.setup.action.assert.label
  Card. = 0..1
  Type = string
  Short Label = Tracking/logging assertion label
  Definition = The label would be used for tracking/logging purposes by test engines.
  Comments = This has no impact on the verification itself.

 -- Row 61 -----------------------------------
  Element = TestScript.setup.action.assert.description
  Card. = 0..1
  Type = string
  Short Label = Tracking/reporting assertion description
  Definition = The description would be used by test engines for tracking and reporting purposes.
  Comments = This has no impact on the verification itself.

 -- Row 62 -----------------------------------
  Element = TestScript.setup.action.assert.direction
  Card. = 0..1
  Type = code
  Binding = AssertionDirectionType
  Short Label = response | request
  Definition = The direction to use for the assertion.

 -- Row 63 -----------------------------------
  Element = TestScript.setup.action.assert.compareToSourceId
  Card. = 0..1
  Type = string
  Short Label = Id of fixture used to compare the \"sourceId/path\" evaluations to
  Definition = Id of fixture used to compare the \"sourceId/path\" evaluations to.
  Comments = The id of the fixture used to make comparisons to

 -- Row 64 -----------------------------------
  Element = TestScript.setup.action.assert.compareToSourcePath
  Card. = 0..1
  Type = string
  Short Label = XPath or JSONPath expression against fixture used to compare the \"sourceId/path\" evaluations to
  Definition = XPath or JSONPath expression against fixture used to compare the \"sourceId/path\" evaluations to.
  Comments = The XPath or JSONPath expression to be evaluated against the expected fixture to compare to. Ignored if \"assert.value\" is used. The evaluation will be done before the assertion is evaluated.

 -- Row 65 -----------------------------------
  Element = TestScript.setup.action.assert.contentType
  Card. = 0..1
  Type = code
  Binding = ContentType
  Short Label = xml | json
  Definition = The content-type or mime-type to use for RESTful operation in the \'Content-Type\' header.
  Comments = If this is specified, then test engine shall confirm that the content-type of the last operation\'s headers is set to this value.  If \"assert.sourceId\" element is specified, then the evaluation will be done against the headers mapped to that sourceId (and not the last operation\'s headers).    If \'xml\' is specified, then \'Content-Type\' header of \'application/xml+fhir\' will be confirmed. If \'json\' is specified, then \'application/json+fhir\' will be used. If you\'d like to have more control over the string, then use \'assert.headerField\' instead.
  Missing Meaning = xml

 -- Row 66 -----------------------------------
  Element = TestScript.setup.action.assert.headerField
  Card. = 0..1
  Type = string
  Short Label = HTTP header field name
  Definition = The HTTP header field name e.g. \'Location\'
  Comments = If \"headerField\" is specified then \"value\" must be specified.  If \"sourceId\" is not specified, then \"headerField\" will be evaluated against the last operation\'s response headers.  Test engines are to keep track of the last operation\'s response body and response headers.

 -- Row 67 -----------------------------------
  Element = TestScript.setup.action.assert.minimumId
  Card. = 0..1
  Type = string
  Short Label = Fixture Id of minimum content resource
  Definition = The ID of a fixture.  Asserts that the response contains at a minimumId the fixture specified by minimumId.
  Comments = Asserts that the response contains all the element/content in another fixture pointed to by minimumId.  This can be a statically defined fixture or one that is dynamically set via responseId.

 -- Row 68 -----------------------------------
  Element = TestScript.setup.action.assert.navigationLinks
  Card. = 0..1
  Type = boolean
  Short Label = Perform validation on navigation links?
  Definition = Whether or not the test execution performs validation on the bundle navigation links
  Comments = Asserts that the Bundle contains first, last, and next links.

 -- Row 69 -----------------------------------
  Element = TestScript.setup.action.assert.operator
  Card. = 0..1
  Type = code
  Binding = AssertionOperatorType
  Short Label = equals | notEquals | in | notIn | greaterThan | lessThan | empty | notEmpty | contains | notContains
  Definition = The operator type
  Comments = Operators come handy especially for negative testing.  If operator is not specified, then the \"equals\" operator is assumed.  e.g. <code>   <assert>  <operator value=\"in\" />  <responseCode value=\"200,201,204\" />    </assert>    <assert>  <operator value=\"notEquals\" />  <response value=\"okay\"/>   </assert>    <assert>  <operator value=\"greaterThan\" />    <responseHeader>     <field value=\"Content-Length\" />     <value value=\"0\" />    <responseHeader>   </assert> </code>

 -- Row 70 -----------------------------------
  Element = TestScript.setup.action.assert.path
  Card. = 0..1
  Type = string
  Short Label = XPath or JSONPath expression
  Definition = The XPath or JSONPath expression to be evaluated against the fixture representing the response received from server.
  Comments = If both \"path\" and \"fixtureId\" are specified, then the path will be evaluated against the responseBody mapped to the fixtureId.  If \"path\" is specified and \"fixtureId\" is not, then the path will be evaluated against the responseBody of the last operation.  Test engines are to store the response body and headers of the last operation at all times for subsequent assertions.

 -- Row 71 -----------------------------------
  Element = TestScript.setup.action.assert.resource
  Card. = 0..1
  Type = code
  Binding = FHIRDefinedType
  Short Label = Resource type
  Definition = The type of the resource.  See http://hl7-fhir.github.io/resourcelist.html.
  Comments = This will be expected resource type in response body e.g. in read, vread, search, etc.  See http://hl7-fhir.github.io/resourcelist.html for complete list of resource types.  e.g. <assert > <resourceType value=\"Patient\" </assert>

 -- Row 72 -----------------------------------
  Element = TestScript.setup.action.assert.response
  Card. = 0..1
  Type = code
  Binding = AssertionResponseTypes
  Short Label = okay | created | noContent | notModified | bad | forbidden | notFound | methodNotAllowed | conflict | gone | preconditionFailed | unprocessable
  Definition = okay | created | noContent | notModified | bad | forbidden | notFound | methodNotAllowed | conflict | gone | preconditionFailed | unprocessable
  Comments = This is a shorter way of achieving similar verifications via \"assert.responseCode\".  If you need more control, then use \"assert.responseCode\"  e.g. <assert>  <contentType value=\"json\" />  <response value=\"okay\"/> </assert>

 -- Row 73 -----------------------------------
  Element = TestScript.setup.action.assert.responseCode
  Card. = 0..1
  Type = string
  Short Label = HTTP response code to test
  Definition = The value of the HTTP response code to be tested
  Comments = To be used with \"operator\" attribute value. Asserts that the response code equals this value if \"operator\" is not specified.   If the operator is \"in\" or \"notIn\" then the responseCode would be a comma-separated list of values e.g. \"200,201\". Otherwise, it\'s expected to be a numeric value.   If \"fixture\" is not specified, then the \"responseBodyId\" value of the last operation is assumed.

 -- Row 74 -----------------------------------
  Element = TestScript.setup.action.assert.sourceId
  Card. = 0..1
  Type = id
  Short Label = Fixture Id of source expression or headerField
  Definition = Fixture to evaluate the XPath/JSONPath expression or the headerField  against.
  Comments = This can be a statically defined fixture (at the top of the testscript) or a dynamically set fixture created by responseId of the action.operation element.

 -- Row 75 -----------------------------------
  Element = TestScript.setup.action.assert.validateProfileId
  Card. = 0..1
  Type = id
  Short Label = Profile Id of validation profile reference
  Definition = The ID of the Profile to validate against.
  Comments = The ID of a Profile fixture. Asserts that the response is valid according to the Profile specified by validateProfileId.

 -- Row 76 -----------------------------------
  Element = TestScript.setup.action.assert.value
  Card. = 0..1
  Type = string
  Short Label = The value to compare to
  Definition = The value to compare to
  Comments = The string-representation of a number, string, or boolean that is expected.  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before comparing this value to the actual value.

 -- Row 77 -----------------------------------
  Element = TestScript.setup.action.assert.warningOnly
  Card. = 0..1
  Type = boolean
  Short Label = Will this assert produce a warning only on error?
  Definition = Whether or not the test execution will produce a warning only on error for this assert
  Comments = If this element is specified and it is true, then assertion failures can be logged by test engine but should not stop the test script execution from proceeding.  There are likely cases where the spec is not clear on what should happen. If the spec says something is optional (maybe a response header for example), but a server doesn’t do it, we could choose to issue a warning.
  Default Value = False

 -- Row 78 -----------------------------------
  Element = TestScript.test
  Card. = 0..*
  UML = 580;270
  Short Label = A test in this script
  Definition = A test in this script.

 -- Row 79 -----------------------------------
  Element = TestScript.test.name
  Card. = 0..1
  Type = string
  Short Label = Tracking/logging name of this test
  Definition = The name of this testused for tracking/logging purposes by test engines.

 -- Row 80 -----------------------------------
  Element = TestScript.test.description
  Card. = 0..1
  Type = string
  Short Label = Tracking/reporting short description of the test
  Definition = A short description of the test used by test engines for tracking and reporting purposes.

 -- Row 81 -----------------------------------
  Element = TestScript.test.metadata
  Card. = 0..1
  Type = @TestScript.metadata
  Short Label = Capabiltities that are expected to function correctly on the FHIR server being tested
  Definition = Capabilties that must exist and is assumed to function correctly on the FHIR server being tested.

 -- Row 82 -----------------------------------
  Element = TestScript.test.action
  Card. = 1..*
  UML = 450;380
  Short Label = A test operation or assert to perform
  Definition = Action would contain either an operation or an assertion.
  Comments = An action should contain either an operation or an assertion but not both.  It can contain any number of variables.

 -- Row 83 -----------------------------------
  Element = TestScript.test.action.operation
  Card. = 0..1
  Type = @TestScript.setup.action.operation
  Short Label = The setup operation to perform
  Definition = An operation would involve a REST request to a server.

 -- Row 84 -----------------------------------
  Element = TestScript.test.action.assert
  Card. = 0..1
  Type = @TestScript.setup.action.assert
  Short Label = The setup assertion to perform
  Definition = Evaluates the results of previous operations to determine if the server under test behaves appropriately.
  Comments = In order to evaluate an assertion the request, response, and results of the most recently executed operation must always be maintained by the test engine.

 -- Row 85 -----------------------------------
  Element = TestScript.teardown
  Card. = 0..1
  UML = 70;290
  Short Label = A series of required clean up steps
  Definition = A series of operations required to clean up after the all the tests are executed (successfully or otherwise).

 -- Row 86 -----------------------------------
  Element = TestScript.teardown.action
  Card. = 1..*
  UML = 200;380
  Short Label = One or more teardown operations to perform
  Definition = The teardown action will only contain an operation.
  Comments = An action should contain either an operation or an assertion but not both.  It can contain any number of variables.

 -- Row 87 -----------------------------------
  Element = TestScript.teardown.action.operation
  Card. = 0..1
  Type = @TestScript.setup.action.operation
  Short Label = The teardown operation to perform
  Definition = An operation would involve a REST request to a server.

=== Sheet Search =====================================

 -- Row 1 -----------------------------------
  Name = url
  Type = uri
  Description = TestScript url
  Path = TestScript.url

 -- Row 2 -----------------------------------
  Name = identifier
  Type = token
  Description = TestScript.identifier
  Path = TestScript.identifier

 -- Row 3 -----------------------------------
  Name = name
  Type = string
  Description = TestScript.name
  Path = TestScript.name

 -- Row 4 -----------------------------------
  Name = description
  Type = string
  Description = TestScript description
  Path = TestScript.description

 -- Row 5 -----------------------------------
  Name = testscript-capability
  Type = string
  Description = TestScript required and validated capability
  Path = TestScript.metadata.capability.description

 -- Row 6 -----------------------------------
  Name = testscript-setup-capability
  Type = string
  Description = TestScript setup required and validated capability
  Path = TestScript.setup.metadata.capability.description

 -- Row 7 -----------------------------------
  Name = testscript-test-capability
  Type = string
  Description = TestScript test required and validated capability
  Path = TestScript.test.metadata.capability.description

=== Sheet Profiles =====================================

=== Sheet Examples =====================================

 -- Row 1 -----------------------------------
  Name = General
  Identity = example
  Description = General TestScript Example
  Filename = testscript-example.xml

 -- Row 2 -----------------------------------
  Name = Multiserver
  Identity = multiserver
  Description = Multiserver TestScript Example
  Filename = testscript-example-multiserver.xml

 -- Row 3 -----------------------------------
  Name = Read Test
  Identity = ReadTestScript
  Description = Read TestScript Example
  Filename = testscript-readtest.xml

 -- Row 4 -----------------------------------
  Name = Update Test
  Identity = update
  Description = Update TestScript Example
  Filename = testscript-update.xml

 -- Row 5 -----------------------------------
  Name = History Test
  Identity = history
  Description = History TestScript Example
  Filename = testscript-history.xml

 -- Row 6 -----------------------------------
  Name = Search Test
  Identity = search
  Description = Search TestScript Example
  Filename = testscript-search.xml

=== Sheet Examples =====================================
