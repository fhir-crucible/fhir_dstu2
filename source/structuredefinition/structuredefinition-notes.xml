<div xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/1999/xhtml ../../schema/fhir-xhtml.xsd" xmlns="http://www.w3.org/1999/xhtml">


<h2>Interpretation Notes:</h2>

<ul>

<li>A structure is represented as a flat list of elements. The <code>element.path</code> provides the overall structure.</li>
<li><code>element.short</code>, <code>element.formal</code>, <code>element.comments</code> and <code>element.mapping</code> provide the specific definition for the field in a specific context.</li>
<li><code>element.type</code> is used to specify which types may be used for this element. If there is more than one type, the element offers a choice of types and must have a name that terminates in "[x]". 
Names of elements that are choices retain the "[x]" in the name, even if a constraint on such an element limits the number of allowed types down to one.</li>
<li>When using xpath to make constraints about the relationship between the contents of the narrative and the contents of the data elements, the element against which the rule is expressed is the one against which the error or warning will be reported by a validator.</li>
<li>When xpath constraints refer to elements that offer a choice of types, the statement must use the fully expanded name (including the actual type), not the name ending in "[x]".</li>
<li>For xpath constraints, the prefix "f" should be used for "http://hl7.org/fhir", and "h" for "http://www.w3.org/1999/xhtml". XPath constraints are written against the XML representation, but the rules they describe SHALL be true in any other representation as well</li>
<li>The condition element is used to assert that a constraint defined on another element affects the allowed cardinality of this element.</li>
</ul>

<h3>Different uses for StructureDefinition</h3>
<p>
The base structure definition is used in a number of different ways to support
the FHIR specification. The various uses of the StructureDefinition are 
controlled by the elements <code>kind</code>, <code>constrainedType</code>, <code>base</code>, and <code>url</code>,
using this basic pattern:
</p>
<pre class="json">
{
  "url": the identity of this structure definition,
  "kind": (datatype | resource),
  "constrainedType": the type being constrained (if it's a constraint)
  "base": the structure definition from which this is derived
}
</pre>
<p>
This list shows a number of examples, with links to real examples for each:
</p>
<ol>
 <li>Base definition of a data type (example: <a href="datatypes.html#Quantity">Quantity</a> - <a href="quantity.profile.xml.html">XML</a>, <a href="quantity.profile.json.html">JSON</a>):<br/>
<pre class="json">
{
  "resourceType": "StructureDefinition",
  "url": "http://hl7.org/fhir/StructureDefinition/Quantity",
  "name": "Quantity",
  "kind": "datatype",
  "base": "http://hl7.org/fhir/StructureDefinition/Element",
}
</pre>
 </li>

 <li>A constrained data type (example: <a href="datatypes.html#Money">Money</a>  - <a href="money.profile.xml.html">XML</a>, <a href="money.profile.json.html">JSON</a>):<br/>
<pre class="json">
{
  "resourceType": "StructureDefinition",
  "url": "http://hl7.org/fhir/StructureDefinition/Money",
  "name": "Money",
  "kind": "datatype",
  "constrainedType": "Quantity",
  "base": "http://hl7.org/fhir/StructureDefinition/Quantity"
}
</pre>
	</li>

 <li>Base definition of a resource (example: <a href="patient.html">Patient</a> - <a href="patient.profile.xml.html">XML</a>, <a href="patient.profile.json.html">JSON</a>): <br/>
<pre class="json">
{
  "resourceType": "StructureDefinition",
  "url": "http://hl7.org/fhir/StructureDefinition/Quantity",
  "name": "Patient",
  "kind": "resource",
  "base":"http://hl7.org/fhir/StructureDefinition/DomainResource"
}
</pre>
 </li>

 <li>Constraint on a resource (example: <a href="daf/patient-daf-dafpatient.html">DAF Patient</a> - <a href="daf/patient-daf-dafpatient.profile.xml.html">XML</a>, <a href="daf/patient-daf-dafpatient.profile.json.html">JSON</a>): <br/>
<pre class="json">
{
  "resourceType": "StructureDefinition",
  "url": "http://hl7.org/fhir/StructureDefinition/patient-daf-dafpatient",
  "name": "U.S. Data Access Framework (DAF) Patient Profile",
  "kind": "resource",
  "constrainedType": "Patient"
  "base":"http://hl7.org/fhir/StructureDefinition/Patient"
}
</pre>
 </li>

 <li>Base Extension (a standard data type) (example: <a href="extensibility.html#Extension">Extension</a> - <a href="extension.profile.xml.html">XML</a>, <a href="extension.profile.json.html">JSON</a>): <br/>
<pre class="json">
{
  "resourceType": "StructureDefinition",
  "url": "http://hl7.org/fhir/StructureDefinition/Extension",
  "name": "Extension",
  "kind": "datatype",
  "base":"http://hl7.org/fhir/StructureDefinition/Element",
}
</pre>
 </li>

 <li>A defined Extension  (example: <a href="extension-us-core-race.html">Extension</a>  - <a href="extension-us-core-race.xml.html">XML</a>, <a href="extension-us-core-race.json.html">JSON</a>): <br/>
<pre class="json">
{
  "resourceType": "StructureDefinition",
  "url": "http://hl7.org/fhir/StructureDefinition/us-core-race",
  "name": "A category of humans sharing history, origin or nationality",
  "kind": "datatype",
  "constrainedType": "Extension",
  "base": "http://hl7.org/fhir/StructureDefinition/Extension"
}
</pre>
 </li>
 
 <li>A contraint on a defined extension (no examples currently defined): <br/>
<pre class="json">
{
  "resourceType": "StructureDefinition",
  "url": "http://example.org/fhir/StructureDefinition/race",
  "name": "Race codes used by institution (a subset of meaningful use codes)",
  "kind": "datatype",
  "constrainedType": "Extension",
  "base": "http://hl7.org/fhir/StructureDefinition/us-core-race"
}
</pre>
 </li>

</ol>

<p>
On this list, structure definitions of type 1, 3, and 5 can only be defined by the FHIR specification itself. The other kinds of structure definitions 
are (or may be) created by the specification, but can also be defined by other implementers.
</p>

<h3>Rules for Constrained Types</h3>
<p>
When the type of a structure definition is either a "constraint" or an "extension", then the following rules apply:
</p>
<ul>
 <li>The structure must nominate a base resource from which it is derived</li>
 <li>The structure definition cannot introduce any new elements or value domains that are not valid in the structure - e.g. the structure must be a true constraint, and anything that meets the description of this structure must also be valid following the description of the base structure</li>
 <li>In practice, this means that:
   <ul>
     <li>no new paths may be introduced that are not found in the base structure</li> 
     <li>the list of types for an element must be the same or a subset of the list of types for the same element in the base structure</li> 
     <li>The definition can be changed in the derived structure, but it must still be logically consistent with the definition in the base. e.g. the base element may be defined as "Result value" and this structure could define it as "Plasma Cholesterol Test Value", but not "Result status".</li>
     <li>The cardinality must be a subset of the allowable cardinality in the base structure i.e. the minumum must be >= the base minimum, and the maximum must be &lt;= the base maximum</li>
   </ul>
  </li>
  <li>Note that because of slicing, there can be more than one element for the same path. For details, see <a href="profiling.html">Profiling resources</a></li>
</ul>
  
<!-- 
<li>For an extension definition, the cardinality constraints are limits on the constraints of any reference to the extension in a profile. 
For example, if the minimum cardinality of an extension is 1 when it is defined, then any profile that includes that extension in the instance
SHALL include it with a minimum cardinality of 1 and therefore any instance that conforms to the profile SHALL include the extension. Note, however,
that if the extension is  directly referenced in an instance rather than applied through a profile, the minimum cardinality doesn't apply, 
though the maximum one still does.
</li>  
<li>For an element with a maximum cardinality of 1, there can only be one entry in the value list, which is either a literal fixed type (with an element name matching the type of the fixed value) or a name,
  which is a reference to a named constraint pattern. If the element has a maximum cardinality of &gt;1, then there can be multiple values - again, either fixed values with a type or a named constraint. 
  Each of these appears in the list with the order and cardinality specified. By this means, a list may be "sliced" into a series of different components.</li>
--> 
  
<h3>Common Mapping Targets</h3>
<p>
Structures are able to map elements to concepts in other definition systems. Generally these are used to 
map the elements to local implementation models, data paths, and concepts. However they are also used to map
to other standards and published terminologies. These are the standard URIs used for common targets of the 
mapping:
</p>

<table class="lines">
  <tr><td>http://loinc.org</td><td>LOINC code for the element</td></tr>
  <tr><td>http://snomed.info</td><td>SNOMED CT code for the element</td></tr>
  <tr><td>http://hl7.org/v3</td><td>RIM mapping</td></tr>
  <tr><td>http://hl7.org/v2</td><td>v2 mapping</td></tr>
  <tr><td>http://nema.org/dicom</td><td>DICOM tag mapping</td></tr>
  <tr><td>http://w3.org/vcard</td><td>vCard equivalent field</td></tr>
  <tr><td>http://ihe.net/xds</td><td>XDS metadata equivalent</td></tr>
</table>

<!--
<h2>Profiled FHIR</h2>
<p>
If a profile is unambiguous, then the FHIR profile tooling (ref to be provided when the tooling exists) 
is able to generate reference implementation based object models that express 
the profiled model natively, where the object interface does not include 
prohibited elements, treats declared extensions as primary properties and 
slices lists according to the profile. This eases the burden on an implementer, 
though this object model can only be used with a sub-set of the possible resources. <!-.-only if it enforces maxOccurs.  Extra elements can be mapped into extensions -!->
</p>
<p>
The tooling is also able to generate bi-directional transforms between the 
<a href="formats.html">normal XML format</a> and an XML representation of this 
profiled object model and schema for this profiled XML representation. 
This XML form has extensions promoted into the primary XML form by using the 
extension code as the XML name and sliced lists are renamed to use the 
Profile.resource.element.name as the XML element name. Profiles are only suitable
for this use if they ensure that there are no clashing extension names when
the extension definition spaces are ignored and that the sliced list names are 
appropriate.<!-.- Any reason we limit this to only XML? - because transforms are XML things -!->
</p>

<p>
Implementations are allowed to exchange this profiled XML format. Implementations
that do so are not fully conformant to FHIR; instead they can claim to be conformant
to "Profiled FHIR". Implementations should consider carefully before adopting this 
approach; while it will reduce the amount of work required to initially implement 
particular profiles, it will increase the amount of work required to exchange this
data with other communities or to re-use tooling and applications that are also 
used in other contexts. This cost should particularly be considered in light of the
fact that the previously discussed tooling allows applications to be written as 
though they are dealing with "Profiled FHIR" instances when they are in fact sending
and receiving fully conformant FHIR instances.
</p>
-->

</div>
