
=== Sheet Bindings =====================================

 -- Row 1 -----------------------------------
  Binding Name = FilterOperator
  Binding = code list
  Reference = #filter-operator
  Definition = The kind of operation to perform as a part of a property based filter

 -- Row 2 -----------------------------------
  Binding Name = ConceptDesignationUse
  Binding = value set
  Reference = valueset-designation-use
  Definition = Details of how a designation would be used
  Conformance = extensible

=== Sheet filter-operator =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = =
  Display = Equals
  Definition = The specified property of the code equals the provided value

 -- Row 2 -----------------------------------
  Id = 2
  Code = is-a
  Display = Is A (by subsumption)
  Definition = Includes all concept ids that have a transitive is-a relationship with the concept Id provided as the value, including the provided concept itself

 -- Row 3 -----------------------------------
  Id = 3
  Code = is-not-a
  Display = Not (Is A) (by subsumption)
  Definition = The specified property of the code does not have an is-a relationship with the provided value

 -- Row 4 -----------------------------------
  Id = 4
  Code = regex
  Display = Regular Expression
  Definition = The specified property of the code  matches the regex specified in the provided value

 -- Row 5 -----------------------------------
  Id = 5
  Code = in
  Display = In Set
  Definition = The specified property of the code is in the set of codes or concepts specified in the provided value (comma separated list)

 -- Row 6 -----------------------------------
  Id = 6
  Code = not-in
  Display = Not in Set
  Definition = The specified property of the code is not in the set of codes or concepts specified in the provided value (comma separated list)

=== Sheet Invariants =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Context = ValueSet.compose
  English = A value set composition SHALL have an include or an import
  XPath = exists(f:include) or exists(f:import)

 -- Row 2 -----------------------------------
  Id = 2
  Context = ValueSet
  English = A value set with only one import SHALL also have an include and/or an exclude unless the value set includes and inline code system
  XPath = not(exists(f:compose)) or (count(f:compose/f:import)!=1 or exists(f:compose/f:include) or exists(f:compose/f:exclude) or exists(f:codeSystem))

 -- Row 3 -----------------------------------
  Id = 3
  Context = ValueSet.codeSystem
  English = Within a code system definition, all the codes SHALL be unique
  XPath = count(distinct-values(descendant::f:concept/f:code/@value))=count(descendant::f:concept)

 -- Row 4 -----------------------------------
  Id = 5
  Context = ValueSet
  English = Value set SHALL contain at least one of a codeSystem, a compose, or an expansion element
  XPath = exists(f:codeSystem) or exists(f:compose) or exists(f:expansion)

 -- Row 5 -----------------------------------
  Id = 6
  Context = ValueSet.expansion.contains
  English = SHALL have a code or a display
  XPath = exists(f:code) or exists(f:display)

 -- Row 6 -----------------------------------
  Id = 7
  Context = ValueSet
  English = A defined code system (if present) SHALL have a different identifier to the value set itself
  XPath = not(f:codeSystem/f:system/@value = f:identifier/@value)

 -- Row 7 -----------------------------------
  Id = 8
  Context = ValueSet.codeSystem
  English = Codes must be unique
  XPath = count(descendant::f:concept)=count(distinct-values(descendant::f:concept/f:code/@value))

 -- Row 8 -----------------------------------
  Id = 9
  Context = ValueSet.expansion.contains
  English = Must have a code if not abstract
  XPath = exists(f:code) or (f:abstract/@value = \'true\')

 -- Row 9 -----------------------------------
  Id = 10
  Context = ValueSet.expansion.contains
  English = Must have a system if a code is present
  XPath = exists(f:system) or not(exists(f:code))

 -- Row 10 -----------------------------------
  Id = 11
  Context = ValueSet.compose.include
  English = Cannot have both concept and filter
  XPath = not(exists(f:concept)) or not(exists(f:filter))

=== Sheet Data Elements =====================================

 -- Row 1 -----------------------------------
  Element = ValueSet
  UML = 0;0
  Type = DomainResource
  Short Label = A set of codes drawn from one or more code systems
  Definition = A value set specifies a set of codes drawn from one or more code systems
  RIM Mapping = N/A
  w5 = conformance.terminology

 -- Row 2 -----------------------------------
  Element = ValueSet.url
  Card. = 0..1
  Summary = y
  Type = uri
  Short Label = Globally unique logical id for  value set
  Definition = An absolute URL that is used to identify this value set when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this value set is (or will be) published
  RIM Mapping = N/A
  w5 = id

 -- Row 3 -----------------------------------
  Element = ValueSet.identifier
  Card. = 0..1
  Summary = y
  Type = Identifier
  Short Label = Additional identifier for the value set (v2 / CDA)
  Definition = Formal identifier that is used to identify this value set when it is represented in other formats, or referenced in a specification, model, design or an instance.
  Comments = Typically, this is used for values that can go in a v3 II data type
  CDISC Define.xml 2.0 Mapping = Identifier part
  w5 = id

 -- Row 4 -----------------------------------
  Element = ValueSet.version
  Card. = 0..1
  Summary = y
  Type = string
  Short Label = Logical id for this version of the value set
  Definition = Used to identify this version of the value set when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the profile author manually and the value should be a timestamp
  Comments = There may be multiple resource versions of the value set that have the same identifier
  RIM Mapping = N/A
  w5 = id.version

 -- Row 5 -----------------------------------
  Element = ValueSet.name
  Card. = 0..1
  Summary = y
  Type = string
  Short Label = Informal name for this value set
  Definition = A free text natural language name describing the value set
  Requirements = Support human navigation
  Comments = The name is not expected to be unique. A name should be provided unless the value set is a contained resource (e.g. an anonymous value set in a profile). Most registries will require a name
  RIM Mapping = N/A

 -- Row 6 -----------------------------------
  Element = ValueSet.status
  Card. = 1..1
  Is Modifier = Yes
  Summary = y
  Type = code
  Binding = ConformanceResourceStatus
  Short Label = draft | active | retired
  Definition = The status of the value set
  Requirements = Identify when/if the value set should be used.
  Comments = Allows filtering of value sets that are appropriate for use vs. not
  RIM Mapping = N/A
  w5 = status

 -- Row 7 -----------------------------------
  Element = ValueSet.experimental
  Card. = 0..1
  Summary = y
  Type = boolean
  Short Label = If for testing purposes, not real usage
  Definition = This valueset was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage
  Comments = Allows filtering of value sets that are appropriate for use vs. not
  w5 = class

 -- Row 8 -----------------------------------
  Element = ValueSet.publisher
  Card. = 0..1
  Summary = y
  Type = string
  Short Label = Name of the publisher (Organization or individual)
  Definition = The name of the individual or organization that published the value set
  Requirements = Helps establish the \"authority/credibility\" of the value set.  May also allow for contact
  Comments = Usually an organization, but may be an individual. This item SHOULD be populated unless the information is available from context.
  w5 = who.witness

 -- Row 9 -----------------------------------
  Element = ValueSet.contact
  Card. = 0..*
  Summary = y
  Short Label = Contact details of the publisher
  Definition = Contacts to assist a user in finding and communicating with the publisher
  Comments = May be a web site, an email address, a telephone number (tel:), etc.

 -- Row 10 -----------------------------------
  Element = ValueSet.contact.name
  Card. = 0..1
  Summary = Y
  Type = string
  Short Label = Name of a individual to contact
  Definition = The name of an individual to contact regarding the value set
  Comments = If there is no named individual, the telecom is for the organization as a whole

 -- Row 11 -----------------------------------
  Element = ValueSet.contact.telecom
  Card. = 0..*
  Summary = Y
  Type = ContactPoint
  Short Label = Contact details for individual or publisher
  Definition = Contact details for individual (if a name was provided) or the publisher

 -- Row 12 -----------------------------------
  Element = ValueSet.date
  Card. = 0..1
  Summary = y
  Type = dateTime
  Short Label = Date for given status
  Definition = The date that the value set status was last changed. The date must change when the business version changes, if it does, and it must change if the status code changes. in addition, it should change when the substantiative content of the implementation guide changes (e.g. the \'content logical definition\')
  Requirements = Need to know when a value set was first legal for use or became withdrawn or replaced.
  Comments = Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the value set. Additional specific dates may be added as extensions
  RIM Mapping = N/A
  w5 = when.recorded

 -- Row 13 -----------------------------------
  Element = ValueSet.lockedDate
  Card. = 0..1
  Summary = Y
  Type = date
  Short Label = Fixed date for all referenced code systems and value sets
  Definition = If a Locked Date is defined, then the Content Logical Definition must be evaluated using the current version of all referenced code system(s) and value sets as of the Locked Date
  Comments = With a defined Locked Date the value set is considered \"Locked\". Otherwise, the value set may have different expansions as underlying code systems and/or value sets evolve.  The interpretation of lockedDate is often dependent on the context - e.g. a SNOMED CT derived value set with a lockedDate will have a different expansion in USA than in UK.  If a value set specifies a version for include and exclude statements, and also specifies a locked date, the specified versions need to be available that date, or the value set will not be usable
  w5 = when.init

 -- Row 14 -----------------------------------
  Element = ValueSet.description
  Card. = 0..1
  Aliases = Scope; Purpose
  Summary = y
  Type = string
  Short Label = Human language description of the value set
  Definition = A free text natural language description of the use of the value set - reason for definition, \"the semantic space\" to be included in the value set, conditions of use, etc. The description may include a list of expected usages for the value set and can also describe the approach taken to build the value set.
  Requirements = Human understandability
  Comments = The description is not intended to describe the semantics of the Value Set - there are no intrinsic semantics separate from the codes contained in its expansion. The description should capture its intended use, which is needed for ensuring integrity for its use in models across future changes. . A description should be provided unless the value set is a contained resource (e.g. an anonymous value set in a profile). Most registries will require a description
  RIM Mapping = N/A

 -- Row 15 -----------------------------------
  Element = ValueSet.useContext
  Card. = 0..*
  Summary = y
  Type = CodeableConcept
  Binding = ConformanceUseContext
  Short Label = Content intends to support these contexts
  Definition = The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of value set definitions.
  Requirements = Assist in searching for appropriate content
  CDISC Define.xml 2.0 Mapping = COMPONENT, PROPERTY, TIME_ASPCT, SYSTEM, SCALE_TYP, METHOD_TYP, CLASS, CLASSTYPE, ORDER_OBS, DOCUMENT_SECTION, HL7_ATTACHMENT_STRUCTURE

 -- Row 16 -----------------------------------
  Element = ValueSet.immutable
  Card. = 0..1
  Summary = Y
  Type = boolean
  Short Label = Indicates whether or not any change to the content logical definition may occur
  Definition = If this is set to \'true\', then no new versions of the content logical definition can be created.  Note: Other metadata might still change
  Comments = Normally immutability is set to \'false\', which is the default assumption if it is not populated.  Note that the implication is that if this is set to \'true\', there may be only one Value Set Version for this Definition. Immutability tends to be set to \'true\' in one of two cases: - Where the value set, by the nature of its usage, cannot change.  For example \"All specializations of ACT in ActClassCode\" - Where there\'s no safe way to express the \"Purpose\" such that someone else could safely make changes to the value set definition Source workflow control must guarantee that the same URI always yields the same definition

 -- Row 17 -----------------------------------
  Element = ValueSet.requirements
  Card. = 0..1
  Type = string
  Short Label = Why is this needed?
  Definition = Explains why this value set is needed and why it\'s been constrained as it has
  Comments = This element does not describe the usage of the value set (that\'s done in comments), rather it\'s for traceability of *why* the element is either needed or why the constraints exist as they do.  This may be used to point to source materials or specifications that drove the structure of this data element

 -- Row 18 -----------------------------------
  Element = ValueSet.copyright
  Card. = 0..1
  Aliases = License,Restrictions
  Type = string
  Short Label = Use and/or Publishing restrictions
  Definition = A copyright statement relating to the value set and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the value set
  Comments = Frequently, the copyright differs between the value set, and codes that are included. The copyright statement should clearly differentiate between these when required

 -- Row 19 -----------------------------------
  Element = ValueSet.extensible
  Card. = 0..1
  Summary = Y
  Type = boolean
  Short Label = Whether this is intended to be used with an extensible binding
  Definition = Whether this is intended to be used with an extensible binding or not
  Requirements = It is not required to say whether this intent applies

 -- Row 20 -----------------------------------
  Element = ValueSet.codeSystem
  Card. = 0..1
  Summary = y
  UML = -190;0
  Inv. = 5
  Short Label = An inline code system - part of this value set
  Definition = A definition of an code system, inlined into the value set (as a packaging convenience). Note that the inline code system may be used from other value sets by referring to it\'s (codeSystem.system) directly
  Comments = All code systems defined as part of a FHIR value set have an implicit valueset that includes all the code in the code system - the value set in which they are defined
  Committee Notes = The choice to package code system as a part of the value set resource rather than having code systems as a first level entity is a scope choice that has generated much comment; this may be reviewed in the future

 -- Row 21 -----------------------------------
  Element = ValueSet.codeSystem.system
  Card. = 1..1
  Summary = y
  Type = uri
  Short Label = URI to identify the code system (e.g. in Coding.system)
  Definition = An absolute URI that is used to reference this code system, including in [Coding]{datatypes.html#Coding}.system
  Comments = The reference is not required to point to any specific kind of definition, but the more information that can be provided, the more useful it is for implementers. Best practice is to resolve to a computable definition of the code system (either a value set, or some other format). Terminology Servers MAY validate this reference (e.g. when accepting PUT/POST), and MAY make additional rules about what kind of content it refers to

 -- Row 22 -----------------------------------
  Element = ValueSet.codeSystem.version
  Card. = 0..1
  Summary = y
  Type = string
  Short Label = Version (for use in Coding.version)
  Definition = The version of this code system that defines the codes. Note that the version is optional because a well maintained code system does not suffer from versioning, and therefore the version does not need to be maintained. However many code systems are not well maintained, and the version needs to be defined and tracked

 -- Row 23 -----------------------------------
  Element = ValueSet.codeSystem.caseSensitive
  Card. = 0..1
  Summary = y
  Type = boolean
  Short Label = If code comparison is case sensitive
  Definition = If code comparison is case sensitive when codes within this system are compared to each other
  Comments = If this value is missing, then it is not specified whether a code system is case sensitive or not. When the rule is not known, Postel\'s law should be followed: produce codes with the correct case, and accept codes in any case. This element is primarily provided to support validation software

 -- Row 24 -----------------------------------
  Element = ValueSet.codeSystem.concept
  Card. = 1..*
  UML = -190;140
  Type = =ConceptDefinition
  Short Label = Concepts in the code system
  Definition = Concepts that are in the code system. The concept definitions are inherently heirarchical, but the definitions must be consulted to determine what the meaning of the heirachical relationships are

 -- Row 25 -----------------------------------
  Element = ValueSet.codeSystem.concept.code
  Card. = 1..1
  Type = code
  Binding = !
  Short Label = Code that identifies concept
  Definition = A code - a text symbol - that uniquely identifies the concept within the code system

 -- Row 26 -----------------------------------
  Element = ValueSet.codeSystem.concept.abstract
  Card. = 0..1
  Type = boolean
  Short Label = If this code is not for use as a real concept
  Definition = If this code is not for use as a real concept
  Default Value = False

 -- Row 27 -----------------------------------
  Element = ValueSet.codeSystem.concept.display
  Card. = 0..1
  Type = string
  Short Label = Text to Display to the user
  Definition = A human readable string that is the recommended default way to present this concept to a user

 -- Row 28 -----------------------------------
  Element = ValueSet.codeSystem.concept.definition
  Card. = 0..1
  Type = string
  Short Label = Formal Definition
  Definition = The formal definition of the concept. The value set resource does not make formal definitions required, because of the prevalence of legacy systems. However, but they are highly recommended, as without them there is no formal meaning associated with the concept

 -- Row 29 -----------------------------------
  Element = ValueSet.codeSystem.concept.designation
  Card. = 0..*
  UML = -190;280
  Short Label = Additional representations for the concept
  Definition = Additional representations for the concept - other languages, aliases, specialized purposes, used for particular purposes, etc
  Requirements = many concept definition systems support mltiple representations, in multiple languages, and for mltiple purposes

 -- Row 30 -----------------------------------
  Element = ValueSet.codeSystem.concept.designation.language
  Card. = 0..1
  Type = code
  Binding = Language
  Short Label = Human language of the designation
  Definition = The language this designation is defined for
  Comments = In the absense of a language, the resource language applies

 -- Row 31 -----------------------------------
  Element = ValueSet.codeSystem.concept.designation.use
  Card. = 0..1
  Type = Coding
  Binding = ConceptDesignationUse
  Short Label = Details how this designation would be used
  Definition = A code that details how this designation would be used
  Comments = if no use is provided, the designation can be assumed to be suitable for general display to a human user

 -- Row 32 -----------------------------------
  Element = ValueSet.codeSystem.concept.designation.value
  Card. = 1..1
  Type = string
  Short Label = The text value for this designation
  Definition = The text value for this designation

 -- Row 33 -----------------------------------
  Element = ValueSet.codeSystem.concept.concept
  Card. = 0..*
  Type = @ValueSet.codeSystem.concept
  Short Label = Child Concepts (is-a / contains / categorises)
  Definition = Child Concepts - a heirarchy of concepts. The nature of the relationships is variable (is-a / contains / categorises) and can only be determined by examining the definitions of the concepts

 -- Row 34 -----------------------------------
  Element = ValueSet.compose
  Card. = 0..1
  UML = 40;290
  Inv. = 5
  Short Label = When value set includes codes from elsewhere
  Definition = A set of criteria that provide the content logical definition of the value set by including or excluding codes from outside this value set

 -- Row 35 -----------------------------------
  Element = ValueSet.compose.import
  Card. = 0..*
  Summary = y
  Inv. = 1
  Type = uri
  Short Label = Import the contents of another value set
  Definition = Includes the contents of the referenced value set as a part of the contents of this value set. This is an absolute URI that is a reference to ValueSet.uri
  Comments = The value set URI is either a logical reference to a defined value set such as a [SNOMED CT reference set]{snomedct.html#implicit}, or a direct reference to a value set definition using ValueSet.url. The reference may also not reference a actual FHIR value set resource; in this case, whatever is referenced is an implicit definition of a value set that needs to be clear about how versions are resolved
  RIM Mapping = N/A

 -- Row 36 -----------------------------------
  Element = ValueSet.compose.include
  Card. = 0..*
  Summary = y
  UML = 40;390
  Inv. = 1
  Type = =ConceptSet
  Short Label = Include one or more codes from a code system
  Definition = Include one or more codes from a code system
  Comments = If there are no codes or filters, the entire code system is included. Note that the set of codes hat are included may contain abstract codes
  RIM Mapping = N/A

 -- Row 37 -----------------------------------
  Element = ValueSet.compose.include.system
  Card. = 1..1
  Summary = y
  Type = uri
  Short Label = The system the codes come from
  Definition = An absolute URI which is the code system from which the selected codes come from
  Comments = See *Coding.system* for further documentation
  CDISC Define.xml 2.0 Mapping = ODM/Study/MetaDataVersion/CodeList/ExternalCodeList/Href
  RIM Mapping = N/A

 -- Row 38 -----------------------------------
  Element = ValueSet.compose.include.version
  Card. = 0..1
  Summary = y
  Type = string
  Short Label = Specific version of the code system referred to
  Definition = The version of the code system that the codes are selected from
  Comments = This is used when selecting the descendents of a concept - they may change between versions. If no version is specified, then the exact contents of the value set may not be known until a context of use binds it to a particular version
  CDISC Define.xml 2.0 Mapping = ODM/Study/MetaDataVersion/CodeList/ExternalCodeList/Version
  RIM Mapping = N/A

 -- Row 39 -----------------------------------
  Element = !ValueSet.compose.include.mode
  Card. = 1..1
  Type = code
  Binding = CodeSelectionMode
  Short Label = code | children | descendants | all
  Definition = The mode of selection - whether the code itself, and/or its descendants are being selected
  Comments = It is an error to include codes that are marked \"abstract\" in a value set that is used directly in a specification, but not an error to include an abstract code in a value set not destined for this use
  RIM Mapping = N/A

 -- Row 40 -----------------------------------
  Element = ValueSet.compose.include.concept
  Card. = 0..*
  UML = -150;400
  Inv. = 11
  Type = =ConceptReference
  Short Label = A concept defined in the system
  Definition = Specifies a concept to be included or excluded.
  Comments = The list of concepts is considered ordered, though the order may not have any particular significance. Typically, the order an an expansion follows that defined in the compose
  RIM Mapping = N/A

 -- Row 41 -----------------------------------
  Element = ValueSet.compose.include.concept.code
  Card. = 1..1
  Type = code
  Binding = !
  Short Label = Code or expression from system
  Definition = Specifies a code for the concept to be included or excluded
  Comments = Expressions are allowed if defined by the underlying code system
  RIM Mapping = N/A

 -- Row 42 -----------------------------------
  Element = ValueSet.compose.include.concept.display
  Card. = 0..1
  Type = string
  Short Label = Test to display for this code for this value set
  Definition = The text to display to the user for this concept in the context of this valueset. If no display is provided, then applications using the value set use the display specified for the code by the system
  Comments = The value set resource allows for an alternative display to be specified for when this concept is used in this particular value set. See notes in the value set narrative about the correct use of this element
  RIM Mapping = N/A

 -- Row 43 -----------------------------------
  Element = ValueSet.compose.include.concept.designation
  Card. = 0..*
  Type = @ValueSet.codeSystem.concept.designation
  Short Label = Additional representations for this valueset
  Definition = Additional representations for this concept when used in this value set - other languages, aliases, specialized purposes, used for particular purposes, etc

 -- Row 44 -----------------------------------
  Element = ValueSet.compose.include.filter
  Card. = 0..*
  UML = 230;420
  Inv. = 11
  Short Label = Select codes/concepts by their properties (including relationships)
  Definition = Select concepts by specify a matching criteria based on the properties (including relationships) defined by the system. If multiple filters are specified, they SHALL all be true.
  Comments = Selecting codes by specifying filters based on properties is only possible where the underlying code system defines appropriate properties. Note that in some cases, the underlying code system defines the logical concepts but not the literal codes for the concepts. In such cases, the literal definitions may be provided by a third party
  RIM Mapping = N/A

 -- Row 45 -----------------------------------
  Element = ValueSet.compose.include.filter.property
  Card. = 1..1
  Type = code
  Binding = !
  Short Label = A property defined by the code system
  Definition = A code that identifies a property defined in the code system
  RIM Mapping = N/A

 -- Row 46 -----------------------------------
  Element = ValueSet.compose.include.filter.op
  Card. = 1..1
  Type = code
  Binding = FilterOperator
  Short Label = = | is-a | is-not-a | regex | in | not-in
  Definition = The kind of operation to perform as a part of the filter criteria
  RIM Mapping = N/A

 -- Row 47 -----------------------------------
  Element = ValueSet.compose.include.filter.value
  Card. = 1..1
  Type = code
  Binding = !
  Short Label = Code from the system, or regex criteria
  Definition = The match value may be either a code defined by the system, or a string value which is used a regex match on the literal string of the property value
  Comments = Use regex matching with care - full regex matching on every SNOMED CT term is prohibitive, for example
  RIM Mapping = N/A

 -- Row 48 -----------------------------------
  Element = ValueSet.compose.exclude
  Card. = 0..*
  Inv. = 2
  Type = @ValueSet.compose.include
  Short Label = Explicitly exclude codes
  Definition = Exclude one or more codes from the value set
  Comments = Usually this is used to selectively exclude codes that were included by subsumption in the inclusions. Any display names specified for the codes are ignored
  RIM Mapping = N/A

 -- Row 49 -----------------------------------
  Element = ValueSet.expansion
  Card. = 0..1
  UML = 360;205
  Inv. = 5
  Short Label = Used when the value set is \"expanded\"
  Definition = A value set can also be \"expanded\", where the value set is turned into a simple collection of enumerated codes. This element holds the expansion, if it has been performed
  Comments = Expansion is performed to produce a collection of codes that are ready to use for data entry or validation

 -- Row 50 -----------------------------------
  Element = ValueSet.expansion.identifier
  Card. = 1..1
  Type = uri
  Short Label = Uniquely identifies this expansion
  Definition = An identifier that uniquely identifies this expansion of the valueset. Systems may re-use the same identifier as long as the expansion and the definition remain the same, but are not required to do so
  Comments = Typically, this uri is a UUID (e.g. urn:uuid:8230ff20-c97a-4167-a59d-dc2cb9df16dd)

 -- Row 51 -----------------------------------
  Element = ValueSet.expansion.timestamp
  Card. = 1..1
  Type = dateTime
  Short Label = Time valueset expansion happened
  Definition = The time at which the expansion was produced by the expanding system.
  Comments = This SHOULD have be a fully populated instant, but in some circumstances, value sets are expanded by hand, of the expansion is published without that precision

 -- Row 52 -----------------------------------
  Element = ValueSet.expansion.total
  Card. = 0..1
  Type = integer
  Short Label = Total number of codes in the expansion
  Definition = The total nober of concepts in the expansion. If the number of concept nodes in this resource is less than the stated number, then the server can return more using the offset parameter
  Comments = Paging only applies to flat expansions

 -- Row 53 -----------------------------------
  Element = ValueSet.expansion.offset
  Card. = 0..1
  Type = integer
  Short Label = Offset at which this resource starts
  Definition = If paging is being used, the offset at which this resource starts - e.g. this resource is a partial view into the expansion. If paging is not being used, this element SHALL not be present
  Comments = Paging only applies to flat expansions. If a filter is applied, the count is the number of concepts that matched the filter, not the number of concepts in an unfiltered view of the expansion
  Missing Meaning = Paging is not being used

 -- Row 54 -----------------------------------
  Element = ValueSet.expansion.parameter
  Card. = 0..*
  UML = 290;80
  Short Label = Parameter that controlled the expansion process
  Definition = A Parameter that controlled the expansion process. These parameters may be used by users of expanded value sets to check whether the expansion is suitable for a particular purpose, or to pick the correct expansion
  Comments = The server decides which parameters to include here, but as a minimum, the list SHOULD include the date, filter, and profile parameters passed to the $expand operation (if any)

 -- Row 55 -----------------------------------
  Element = ValueSet.expansion.parameter.name
  Card. = 1..1
  Type = string
  Short Label = Name as assigned by server
  Definition = The name of the parameter
  Comments = The names are assigned at the discretion of the server
  Committee Notes = There is no standardization of parameter names that control the expansion process. This will be reviewed in the future

 -- Row 56 -----------------------------------
  Element = ValueSet.expansion.parameter.value[x]
  Card. = 0..1
  Type = string | boolean | integer | decimal | uri | code
  Short Label = Value of the named parameter
  Definition = The value of the parameter

 -- Row 57 -----------------------------------
  Element = ValueSet.expansion.contains
  Card. = 0..*
  UML = 190;290
  Short Label = Codes in the value set
  Definition = The codes that are contained in the value set expansion

 -- Row 58 -----------------------------------
  Element = ValueSet.expansion.contains.system
  Card. = 0..1
  Type = uri
  Short Label = System value for the code
  Definition = An absolute URI which is the code system in which the code for this item in the expansion is defined

 -- Row 59 -----------------------------------
  Element = ValueSet.expansion.contains.abstract
  Card. = 0..1
  Type = boolean
  Short Label = If user cannot select this entry
  Definition = If true, this entry is included in the expansion for navigational purposes, and the user cannot select the code directly as a proper value
  Comments = This shouldn\'t be understood to exclude its use for searchig (e..g by subsumption testing). The client should know whether it is appropriate for the user to select an abstract code or not

 -- Row 60 -----------------------------------
  Element = ValueSet.expansion.contains.version
  Card. = 0..1
  Type = string
  Short Label = Version in which this code / display is defined
  Definition = The version of this code system that defined this code and/or display. This should only be used with code systems that do not enforce concept permanence
  Comments = The exact value of the version string is specified by the system from which the code is derived

 -- Row 61 -----------------------------------
  Element = ValueSet.expansion.contains.code
  Card. = 0..1
  Inv. = 6
  Type = code
  Binding = !
  Short Label = Code - if blank, this is not a choosable code
  Definition = The code for this item in the expansion heirarchy. If this code is missing the entry in the heirarchy is a place holder (abstract) and doesn\'t represent a valid code in the value set

 -- Row 62 -----------------------------------
  Element = ValueSet.expansion.contains.display
  Card. = 0..1
  Inv. = 6
  Type = string
  Short Label = User display for the concept
  Definition = The recommended display for this item in the expansion

 -- Row 63 -----------------------------------
  Element = ValueSet.expansion.contains.contains
  Card. = 0..*
  Type = @ValueSet.expansion.contains
  Short Label = Codes contained under this entry
  Definition = Other codes and entries contained under this entry in the heirarchy
  Comments = If the expansion uses this element, there is  no implication about the logical relationship between them, and the  structure cannot be used for logical inferencing. The structure  exists to provide navigational assistance for helping human users to  locate codes in the expansion.

=== Sheet Search =====================================

 -- Row 1 -----------------------------------
  Name = url
  Type = uri
  Description = The logical url for the value set
  Path = ValueSet.url

 -- Row 2 -----------------------------------
  Name = identifier
  Type = token
  Description = The identifier for the value set
  Path = ValueSet.identifier

 -- Row 3 -----------------------------------
  Name = version
  Type = token
  Description = The version identifier of the value set
  Path = ValueSet.version

 -- Row 4 -----------------------------------
  Name = name
  Type = string
  Description = The name of the value set
  Path = ValueSet.name

 -- Row 5 -----------------------------------
  Name = publisher
  Type = string
  Description = Name of the publisher of the value set
  Path = ValueSet.publisher

 -- Row 6 -----------------------------------
  Name = description
  Type = string
  Description = Text search in the description of the value set
  Path = ValueSet.description

 -- Row 7 -----------------------------------
  Name = status
  Type = token
  Description = The status of the value set
  Path = ValueSet.status

 -- Row 8 -----------------------------------
  Name = date
  Type = date
  Description = The value set publication date
  Path = ValueSet.date

 -- Row 9 -----------------------------------
  Name = system
  Type = uri
  Description = The system for any codes defined by this value set
  Path = ValueSet.codeSystem.system

 -- Row 10 -----------------------------------
  Name = code
  Type = token
  Description = A code defined in the value set
  Path = ValueSet.codeSystem.concept.code

 -- Row 11 -----------------------------------
  Name = reference
  Type = uri
  Description = A code system included or excluded in the value set or an imported value set
  Path = ValueSet.compose.include.system

 -- Row 12 -----------------------------------
  Name = context
  Type = token
  Description = A use context assigned to the value set
  Path = ValueSet.useContext

 -- Row 13 -----------------------------------
  Name = expansion
  Type = uri
  Path = ValueSet.expansion.identifier

=== Sheet Profiles =====================================

 -- Row 1 -----------------------------------
  Name = ValueSet Extensions
  IG Name = core
  Filename = valueset-extensions.xml
  Type = spreadsheet

 -- Row 2 -----------------------------------
  Name = Shareable Value Set
  IG Name = core
  Filename = valueset-shareable.xml
  Type = spreadsheet

=== Sheet Examples =====================================

 -- Row 1 -----------------------------------
  Name = Intensional
  Identity = example-intensional
  Description = ValueSet Example using enumeration of codes (intensional)
  Filename = valueset-example.xml

 -- Row 2 -----------------------------------
  Name = InlineCS
  Identity = example-inline
  Description = ValueSet Example defining codes using an inline code system
  Filename = valueset-example-inline.xml

 -- Row 3 -----------------------------------
  Name = Extensional
  Identity = example-extensional
  Description = ValueSet Example using code filter (extensional)
  Filename = valueset-example-extensional.xml

 -- Row 4 -----------------------------------
  Name = Expansion
  Identity = example-expansion
  Description = ValueSet Example using a prepared expansion
  Filename = valueset-example-expansion.xml

 -- Row 5 -----------------------------------
  Name = DICOM DICM
  Identity = dicom-dcim
  Description = Codes defined by DICOM
  Filename = valueset-dicom-dcim.xml

 -- Row 6 -----------------------------------
  Name = RESTful Interactions
  Identity = restful-interaction
  Description = The set of interactions defined by the RESTful part of the FHIR specification
  Filename = valueset-restful-interaction.xml

 -- Row 7 -----------------------------------
  Name = UCUM Common
  Identity = ucum-common
  Description = Common UCUM codes
  Filename = valueset-ucum-common.xml

 -- Row 8 -----------------------------------
  Name = cpt-all
  Identity = cpt-all
  Description = All CPT codes
  Filename = valueset-cpt-all.xml

 -- Row 9 -----------------------------------
  Name = Yes/No/Don\'t know
  Identity = yesnodontknow
  Description = Yes/No/Don\'t know, for capturing a common answer set in questionnaires
  Filename = valueset-example-yesnodontknow.xml

 -- Row 10 -----------------------------------
  Name = NHIN PurposeOfUse
  Identity = nhin-purposeofuse
  Description = NHIN Purpose of Use
  Filename = valueset-nhin-purposeofuse.xml

=== Sheet Examples =====================================

 -- Row 1 -----------------------------------
  Name = expand
  Use = Resource | Instance
  Documentation = The definition of a value set is used to create a simple collection of codes suitable for use for data entry or validation.   If the operation is not called at the instance level, one of the in parameters identifier, context or valueset must be provided.  An expanded value set will be returned, or an OperationOutcome with an error message.
  Type = operation
  Example.Request = $expand-request.txt
  Example.Response = $expand-response.txt
  Title = Value Set Expansion
  Footer = The value set expansion returned by this query should be treated as a transient result that will change over time (whether it does or not depends on how the value set is specified), so applications should repeat the operation each time the value set is used.   Clients can work through large flat expansions in a set of pages (partial views of the full expansion) instead of just getting the full expansion in a single exchange by using offset and count parameters. Servers are not obliged to support paging, but if they do so, SHALL support both the offset and count parameters. Heirarchical expansions are not subject to paging, and servers simply return the entire expansion.  Different servers may return different results from expanding a value set for the following reasons:  * The underlying code systems are different (e.g. different versions, possibly with different defined behaviour) * The server optimises filter includes differently, such as sorting by code frequency * Servers introduce arbitrary groups to assist a user to navigate the lists based either on extensions in the definition, or additional knowledge available to the server

 -- Row 2 -----------------------------------
  Name = expand.identifier
  Use = in
  Documentation = A logical value set identifier (i.e. ValueSet.identifier). The server must know the value set (e.g. it is defined explicitly in the server\'s value sets, or it is defined implicitly by some code system known to the server
  Type = uri
  Min = 0
  Max = 1

 -- Row 3 -----------------------------------
  Name = expand.valueSet
  Use = in
  Documentation = The value set is provided directly as part of the request. Servers may choose not to accept value sets in this fashion
  Type = ValueSet
  Min = 0
  Max = 1

 -- Row 4 -----------------------------------
  Name = expand.context
  Use = in
  Documentation = The context of the value set, so that the server can resolve this to a value set to expand. The recommended format for this URI is [Structure Definition URL]#[name or path into structure definition] e.g. http://hl7.org/fhir/StructureDefinition/observation-hspc-height-hspcheight#Observation.interpretation. Other forms may be used but are not defined. This form is only useable if the terminology server also has access to the profile registry that the server is using, but can be used to delegate the mapping from an application context to a binding to run-time
  Type = uri
  Min = 0
  Max = 1

 -- Row 5 -----------------------------------
  Name = expand.filter
  Use = in
  Documentation = A text filter that is applied to restrict the codes that are returned (this is useful in a UI context). The interpretation of this is delegated to the server in order to allow to determine the most optimal search approach for the context
  Type = string
  Min = 0
  Max = 1

 -- Row 6 -----------------------------------
  Name = expand.profile
  Use = in
  Documentation = A reference to an external definition that provides additional control information about how the expansion is performed.  At this time, there is no agreed format or funtionality for the target of this URI. The [VSAC Documentation](http://www.nlm.nih.gov/vsac/support/authorguidelines/updatingvaluesets.html) provides one example of the use of this parameter.  Implementers using this element will need to agree on an appropriate mechanism for use within their interoperability community.  Known uses for profile include: * whether to return the value set content logical definition with the expansion * whether to include inactive concepts
  Type = uri
  Min = 0
  Max = 1

 -- Row 7 -----------------------------------
  Name = expand.date
  Use = in
  Documentation = The date for which the expansion should be generated.  if a date is provided, it means that the server should use the value set / code system definitions as they were on the given date, or return an error if this is not possible.  Normally, the date is the current conditions (which is the default value) but under some circumstances, systems need to generate an expansion as it would have been in the past. A typical example of this would be where code selection is constrained to the set of codes that were available when the patient was treated, not when the record is being edited. Note that which date is appropriate is a matter for implementation policy.
  Type = dateTime
  Min = 0
  Max = 1

 -- Row 8 -----------------------------------
  Name = expand.offset
  Use = in
  Documentation = Paging support - where to start if a subset is desired (default = 0)
  Type = integer
  Min = 0
  Max = 1

 -- Row 9 -----------------------------------
  Name = expand.count
  Use = in
  Documentation = Paging support - how many codes in a a partial view. Paging only applies to flat expansions - servers ignore paging if the expansion is not flat.  If count = 0, the client is asking how large the expansion is. Servers SHOULD honour this request for heirarchical expansions as well, and simply return the overall count
  Type = integer
  Min = 0
  Max = 1

 -- Row 10 -----------------------------------
  Name = expand.return
  Use = out
  Documentation = The result of the expansion
  Type = ValueSet
  Min = 1
  Max = 1

 -- Row 11 -----------------------------------
  Name = lookup
  Use = Resource
  Documentation = Given a code/system, or a Coding, get additional details about the concept
  Type = operation
  Example.Request = $lookup-request.txt
  Example.Response = $lookup-response.txt
  Title = Concept Look Up
  Footer = Note that the $lookup operation is more than just a value set search  - the server finds the concept, and gathers the return information from the value set and the underlying code system definitions.

 -- Row 12 -----------------------------------
  Name = lookup.code
  Use = in
  Documentation = The code that is to be validated. If a code is provided, a system must be provided
  Type = code
  Min = 0
  Max = 1

 -- Row 13 -----------------------------------
  Name = lookup.system
  Use = in
  Documentation = The system for the code that is to be validated
  Type = uri
  Min = 0
  Max = 1

 -- Row 14 -----------------------------------
  Name = lookup.version
  Use = in
  Documentation = The version of the system, if one was provided in the source data
  Type = string
  Min = 0
  Max = 1

 -- Row 15 -----------------------------------
  Name = lookup.coding
  Use = in
  Documentation = A coding to look up
  Type = Coding
  Min = 0
  Max = 1

 -- Row 16 -----------------------------------
  Name = lookup.date
  Use = in
  Documentation = The date for which the information should be returned. Normally, this is the current conditions (which is the default value) but under some circumstances, systems need to acccess this information as it would have been in the past. A typical example of this would be where code selection is constrained to the set of codes that were available when the patient was treated, not when the record is being edited. Note that which date is appropriate is a matter for implementation policy.
  Type = dateTime
  Min = 0
  Max = 1

 -- Row 17 -----------------------------------
  Name = lookup.name
  Use = out
  Documentation = A display name for the code system
  Type = string
  Min = 1
  Max = 1

 -- Row 18 -----------------------------------
  Name = lookup.version
  Use = out
  Documentation = The version that these details are based on
  Type = string
  Min = 0
  Max = 1

 -- Row 19 -----------------------------------
  Name = lookup.display
  Use = out
  Documentation = The preferred display for this concept
  Type = string
  Min = 1
  Max = 1

 -- Row 20 -----------------------------------
  Name = lookup.abstract
  Use = out
  Documentation = Whether this code is an abstract concept
  Type = boolean
  Min = 0
  Max = 1

 -- Row 21 -----------------------------------
  Name = lookup.designation
  Use = out
  Documentation = Additional representations for this concept
  Type = Tuple
  Min = 0
  Max = *

 -- Row 22 -----------------------------------
  Name = lookup.designation.language
  Documentation = The language this designation is defined for
  Type = code
  Min = 0
  Max = 1

 -- Row 23 -----------------------------------
  Name = lookup.designation.use
  Documentation = A code that details how this designation would be used
  Type = Coding
  Min = 0
  Max = 1

 -- Row 24 -----------------------------------
  Name = lookup.designation.value
  Documentation = The text value for this designation
  Type = string
  Min = 1
  Max = 1

 -- Row 25 -----------------------------------
  Name = validate-code
  Use = Resource | Instance
  Documentation = Validate that a coded value is in the set of codes allowed by a value set.   If the operation is not called at the instance level, one of the in parameters \"identifier\" or \"valueset\" must be provided.  One (and only one) of the in parameters (code, coding, codeableConcept) must be provided.  The operation returns a result (true / false), an error message, and the recommended display for the code
  Type = operation
  Example.Request = $validate-code-request.txt
  Example.Response = $validate-code-response.txt
  Title = Value Set based Validation

 -- Row 26 -----------------------------------
  Name = validate-code.identifier
  Use = in
  Documentation = A logical value set id (i.e. ValueSet.url). The server must know the value set (e.g. it is defined explicitly in the server\'s value sets, or it is defined implicitly by some code system known to the server
  Type = uri
  Min = 0
  Max = 1

 -- Row 27 -----------------------------------
  Name = validate-code.context
  Use = in
  Documentation = The context of the value set, so that the server can resolve this to a value set to validate against. The recommended format for this URI is [Structure Definition URL]#[name or path into structure definition] e.g. http://hl7.org/fhir/StructureDefinition/observation-hspc-height-hspcheight#Observation.interpretation. Other forms may be used but are not defined. This form is only useable if the terminology server also has access to the profile registry that the server is using, but can be used to delegate the mapping from an application context to a binding to run-time
  Type = uri
  Min = 0
  Max = 1

 -- Row 28 -----------------------------------
  Name = validate-code.valueSet
  Use = in
  Documentation = The value set is provided directly as part of the request. Servers may choose not to accept value sets in this fashion. This parameter is used when the client wants the server to expand a value set that is not stored on the server
  Type = ValueSet
  Min = 0
  Max = 1

 -- Row 29 -----------------------------------
  Name = validate-code.code
  Use = in
  Documentation = The code that is to be validated. If a code is provided, a system must be provided
  Type = code
  Min = 0
  Max = 1

 -- Row 30 -----------------------------------
  Name = validate-code.system
  Use = in
  Documentation = The system for the code that is to be validated
  Type = uri
  Min = 0
  Max = 1

 -- Row 31 -----------------------------------
  Name = validate-code.version
  Use = in
  Documentation = The version of the system, if one was provided in the source data
  Type = string
  Min = 0
  Max = 1

 -- Row 32 -----------------------------------
  Name = validate-code.display
  Use = in
  Documentation = The display associated with the code, if provided. If a display is provided a code must be provided. If no display is provided, the server cannot validate the display value, but may choose to return a recommended display name in an extension in the outcome. Whether displays are case sensitive is code system dependent
  Type = string
  Min = 0
  Max = 1

 -- Row 33 -----------------------------------
  Name = validate-code.coding
  Use = in
  Documentation = A coding to validate
  Type = Coding
  Min = 0
  Max = 1

 -- Row 34 -----------------------------------
  Name = validate-code.codeableConcept
  Use = in
  Documentation = A full codeableConcept to validate. The server returns true if one of the coding values is in the value set, and may also validate that the codings are not in conflict with each other if more than one is present
  Type = CodeableConcept
  Min = 0
  Max = 1

 -- Row 35 -----------------------------------
  Name = validate-code.date
  Use = in
  Documentation = The date for which the validation should be checked. Normally, this is the current conditions (which is the default values) but under some circumstances, systems need to validate that a correct code was used at some point in the past. A typical example of this would be where code selection is constrained to the set of codes that were available when the patient was treated, not when the record is being edited. Note that which date is appropriate is a matter for implementation policy.
  Type = dateTime
  Min = 0
  Max = 1

 -- Row 36 -----------------------------------
  Name = validate-code.abstract
  Use = in
  Documentation = if true, then an abstract code is allowed to be used in the context of the code that is being validated. Typically, abstract codes are allowed to be used in value set specifications (e.g. any code that is subsumed by an abstract code). If false (which is the default value), then only concrete codes as defined by the value set are allowed
  Type = boolean
  Min = 0
  Max = 1

 -- Row 37 -----------------------------------
  Name = validate-code.result
  Use = out
  Documentation = True if the concept details supplied are valid
  Type = boolean
  Min = 1
  Max = 1

 -- Row 38 -----------------------------------
  Name = validate-code.message
  Use = out
  Documentation = Error details, if result = false. If this is provided when result = true, the message carries hints and warnings
  Type = string
  Min = 0
  Max = 1

 -- Row 39 -----------------------------------
  Name = validate-code.display
  Use = out
  Documentation = A valid display for the concept if the system wishes to display this to a user
  Type = string
  Min = 0
  Max = 1
