<div xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/1999/xhtml ../../schema/fhir-xhtml.xsd" xmlns="http://www.w3.org/1999/xhtml">

<a name="id"> </a>
<h3>Resource Identity</h3>

<p>
Each resource has an "id" element which contains the logical identity of the resource 
assigned by the server responsible for storing it. Resources always have a known identity
except for the special case when a new resources is being sent to a server to assign
an identity (<a href="http.html#create">create interaction</a>). 
The logical identity is unique within the space of all resources of the same type on 
the same server. Once assigned, the identity is never changed, though copies of the 
same resource made elsewhere may not retain the same identity.
</p>

<p>
The full identity of a resource is an absolute URL constructed from the server base address at 
which it is found, the resource type, and the Logical Id, such as http://test.fhir.org/rest/Patient/123 
(where 123 is the Logical Id). Note that implementations SHOULD NOT assume that the identity of a resource 
is always resolvable to a literal server - it may be temporarily unavailable, or not available by policy (e.g. firewalls) or in some 
cases, it may not actually exist (e.g. use of resource outside a RESTful environment). Resources reference each other by their identity. 
These references are allowed to be absolute or relative (see <a href="references.html">Resource References</a> for further discussion).
Copying or moving resources from one server to another means that resources acquire a new identity. For further details, 
see <a href="managing.html">Managing Resource Identity</a>.
</p>

<p>
Logical ids are case sensitive. Ids are always opaque, and external systems need not and should not 
attempt to determine their internal structure. An id SHALL always be represented in the same way in 
resource references and URLs. Ids can be up to 64 characters long, and contain any combination of 
upper and lowercase ASCII letters, numerals, "-" and ".". 
</p>

<a name="identifiers"> </a>
<h4>"Business" Identifiers</h4>
<p>
In addition to the Resource identity element "id", many resources contain an
element named "identifier", which, if populated, contains a different kind of 
identifier.
</p>
<p>
The resource identity is a direct ("literal") reference that is intended to 
be accessed via http for a resource to be returned. As a resource is copied
from server to server, the resource identity will change as the servers 
assign identities to the resource.
</p>
<p>
However all copies of the reosurce refer to the same underlying concept,
and this concept may also be represented in other formats (variously, v2,
CDA, XDS, and many more). Each representation carries the same identifier
that identifies it consistently across all contexts of use. This is known
as the business identifier, and is found in the <i>identifier</i> element. 
In a few resources, there is a <i>url</i> element that serves a similar
purpose, but is constrained to be a literal URL.
</p>
<p>
If a FHIR server is a stable server that is the canonical master source 
for the definition of a concept, the business identifier for all 
systems may be the same as the literal identity of the resource on the 
master server.
</p>


<a name="metadata"> </a>
<a name="meta"> </a>
<a name="Meta"></a>

<h3 style="margin-bottom: 1px">
Resource Metadata
</h3>

<p>
Each resource contains an element "meta", of type "Meta", which is a set of 
metadata that provides technical and workflow context to the resource. The 
metadata items are all optional, though some of all of them may be required 
in particular implementations or contexts of use.
</p>

<table class="grid">
  <tr>
    <th>Metadata Item</th>
    <th>Type</th>
    <th>Usage</th>
  </tr>
  <tr>
    <td>versionId (0..1)</td>
    <td><a href="datatypes.html#id">id</a></td>
    <td>Changes each time the content of the resource changes. Can be referenced in a <a href="references.html#Resource">resource reference</a>. 
      Can be used to ensure that updates are based on the latest version of the resource. 
    <br/>The version can be globally unique, or scoped by the Logical Id of the resource. 
     Version identifiers are generally either a serially incrementing id scoped by the logical id, or a uuid, though neither of these approaches 
     is required. There is no fixed order for version ids - clients cannot assume that a versionId that comes after another one either numerically or alphabetically represents a later version. 
     The same versionId can never be used for more than one version of the same resource.
    <br/>Note that servers SHOULD support versions, but some are unable to</td>
  </tr>
	 
  <tr>
   <td>lastUpdated (0..1)</td>
   <td><a href="datatypes.html#instant">instant</a></td>
   <td>If populated, this value changes each time the content of the resource 
    changes. it can be used by a system or a human to judge the currency of the resource content. 
    Note that <a href="http.html#update">version aware updates</a> do not use this element</td>
  </tr>
	
  <tr>
   <td>profile (0..*)</td>
   <td><a href="datatypes.html#uri">uri</a></td>
   <td>An assertion that the content conforms to a resource profile (a <a href="structuredefinition.html">StructureDefinition</a>. See <a href="profiling.html#resources">Extending and Restricting Resources</a> for further discussion. 
    Can be changed as profiles and value sets change or the system rechecks conformance</td>
  </tr>
	
  <tr>
   <td>security (0..*)</td>
   <td><a href="datatypes.html#Coding">Coding</a></td>
   <td><a href="security-labels.html">Security labels</a> applied to this resource. These tags connect resources in specific ways to 
    the overall security policy and infrastructure. Security tags can be updated when the resource changes, or whenever the security sub-system chooses to</td>
  </tr>
	
  <tr>
   <td>tag (0..*)</td>
   <td><a href="datatypes.html#Coding">Coding</a></td>
   <td><a href="extras.html">Tags</a> applied to this resource. Tags are used to relate resources to process and workflow. Applications are not required to consider 
    the tags when interpreting the meaning of a resource.</td>
  </tr>
		
</table>
  
[%edt Meta resource.html%]

<p>
Meta is used in the following places: [%dtusage Meta%]
</p>
<p>
Note that the RESTful API defines some <a href="operations.html">Operations</a> that provide
<a href="resource-operations.html#meta">direct read and write access</a> to the <i>meta</i> element.   
</p>

<a name="versions"> </a>
<h4>Technical vs Business Versions</h4>
<p>
All resources are conceptually versioned, and each resource sits at the head of a linear list of past versions. 
The past versions are superceded by the current version, and only available for audit/integrity purposes. 
The current version is e.g. http://acme.org/fhir/ResourceType/id123, and a past version would be 
http://acme.org/fhir/ResourceType/id123/_history/v2.
</p>
<p>
Note that there's no requirement for servers to keep a history. The 
<a href="http.html#history">history interaction</a> is provided for 
where this is an appropriate service to provide. However, Whether a server keeps them 
or not, past versions are dead and gone. 
The current version of the resource is in the <i>Resource.meta.versionId</i>. For a value set this would be:
</p>
<pre>
&lt;ValueSet&gt;
  &lt;meta&gt;
    &lt;versionId value=&quot;v2&quot;/&gt;
  &lt;/meta&gt;
&lt;/ValueSet&gt;
</pre>
<p>
That version changes every time the server updates the resource and writes a new version over the top of an existing one. 
</p>
<p>
Some resources have another version marker in them. For instance, ValueSet has another version in it:
</p>
<pre>
&lt;ValueSet&gt;
  &lt;url value=&quot;http://acme.com/fhir/ValueSet/example&quot;/&gt;
  &lt;version value=&quot;2.0&quot;/&gt;
&lt;/ValueSet&gt;
</pre>
<p>
This says that this is version 2.0 of the 'example' value set. This is the business version of the value set, the one that humans get involved with.
These 2 versions elements have quite different lifecycles. To illustrate, take these cases: 
</p>
<ol>
 <li>
  A value set is posted to a server (POST [base]/ValueSet) with ValueSet.url = "http://acme.com/valuesets/example". This is identified as the 1st version of the value set (ValueSet.version = 1). 
  When the server gets it, it assigns an identity e.g. ValueSet.id = x1, and ValueSet.meta.versionId = 1. 
  Later, another user creates a revised version of the value set, and this is called version 2. It is commmited to the server 
  as an update (PUT [base]/ValueSet/x1). 
  <br/>
  Now, ValueSet.url = http://acme.com/valuesets/example, ValueSet.id = x1, ValueSet.version = 2 and ValueSet.meta.versionId = 2
 </li>
 <li>
  A value set is posted to a server (POST [base]/ValueSet) with ValueSet.url = "http://acme.com/valuesets/example". This is identified as the 1st version of the value set (ValueSet.version = 1). 
  When the server gets it, it assigns an identity e.g. ValueSet.id = x1, and ValueSet.meta.versionId = 1.   
  Then a typo is found in the definition, so this is fixed, but it's still v1 of the value set. This is PUT to [base]/ValueSet/x1. 
  Now, ValueSet.url = http://acme.com/valuesets/example, ValueSet.id = x1, ValueSet.version = 1 and ValueSet.meta.versionId = 2.
  <br/>
  Later, another user creates a revised version of the value set, and this is called version 2. It is commmited to the server 
  as an update (PUT [base]/ValueSet/x1). Now, ValueSet.url = http://acme.com/valuesets/example, ValueSet.id = x1, ValueSet.version = 2 and ValueSet.meta.versionId = 3
 </li> 
 <li>
  A value set is posted to a server (POST [base]/ValueSet) with ValueSet.url = "http://acme.com/valuesets/example". This is identified as the 1st version of the value set (ValueSet.version = 1). 
  When the server gets it, it assigns an identity e.g. ValueSet.id = x1, and ValueSet.meta.versionId = 1.  
  Later, another user creates a revised version of the value set, and this is called version 2.
This time, as well as supporting this new version 2, there are production systems still using version 1, and both need to be valid on the value set server. 
So a new value set is created on the server (POST [base]/ValueSet) and is assigned the identiity 'x2'. 
<br/>
Now, there are two different value sets, both with URL "http://acme.com/valuesets/example". One has ValueSet.id = x1, ValueSet.version = 1 and 
ValueSet.meta.versionId = 1 and the other has ValueSet.id = x2, ValueSet.version = 2 and ValueSet.meta.versionId = 1.
 </li>
</ol>


<a name="implicitRules"> </a>  
<h3>Implicit Rules</h3>
<p>
A reference to a <a href="profiling.html#agreement">custom agreement</a> about how the resources are used 
that was followed when the resource was constructed, and which must be understood when processing the content.
</p>
<p>
Asserting this rule set restricts the content to be only understood by a limited set of 
trading partners. This inherently limits the usefulness of the data in the long term,
and should be avoided where possible. However the existing health 
eco-system is highly fractured, and not yet ready to define, collect, and exchange 
data in a generally exchangeable sense. 
</p>
<p>
Note that resources are almost always constructed following some custom agreement.
Best practice is that such agreements make all knowledge about the content 
of the resource explicit; if custom agreements do this, and declare their extensions
as required, then it is not necessary to understand the agreement when processing the 
resource content.
</p>

<a name="lang"> </a>
<a name="language"> </a>
<h3>Language</h3>

<p>
Each resource may have a language element that specifies the base language of the content using a <a href="http://tools.ietf.org/html/bcp47">code defined in BCP 47</a>.
The language element is provided to support indexing and accessibility (e.g. text-to-speech use the language tag). 
</p>
<p>
There is no default language, though one may be inferred from the context of use.
Not all of the content of the resource has to be in the specified language. 
</p>
<p>
If a language is specified, it should also be specified on the <a href="narrative.html#Narrative">Narrative Text</a>. 
The html language tag in the narrative is used when processing the narrative. The language tag on the resource is provided 
for use to specify the language of alternate presentations generated from the data in the resource
</p>

<a name="tags"> </a>
<a name="tag"> </a>
<h3>Tags, Profiles, and Security Labels</h3>
<p>
These 3 metadata attributes are part of the resource, but are never used to keep information 
that needs to be understood when interpreting the content of a resource; their 
function is limited to finding and controlling access to the resource, and connecting 
resources to technical or clinical workflow.
</p>

<h4>Tags</h4>
<p>
Tags are used to associate additional operational information with the Resources, including
such as workflow management. A typical use of tagging would be to maintain an informal list
of resources that need review.
</p>
<p>
In a general tag, the <a href="datatypes.html#coding">concept</a> may be a reference to a 
healthcare vocabulary, including ones defined in this specification, or vocabularies such 
as those defined by HL7 for other purposes (e.g. v2 and v3/CDA), LOINC, or SNOMED CT. 
Alternatively, the concept may be one defined by the implementation in the local context. 
</p>

<a name="profile-tags"> </a>
<h4>Profile Tags</h4>
<p>
A profile assertion represents a claim that the resource conforms to <a href="structuredefinition.html">the identified StructureDefinition</a>,
which makes rules about what 
content is allowed to be in a resource. In a profile tag, the term
is a URL that references a <a href="structuredefinition.html">the identified StructureDefinition</a> resource.
</p>
<p>
It's always possible to determine whether a resource conforms to any 
profile simply by testing it against the profile (the <a href="downloads.html">validation tools</a>
provide the functionality to perform this test in a variety of contexts). 
However there are several circumstances where simply examining whether 
a resource conforms to a particular profile as needed is impractical:
</p>
<ul>
 <li>A server searching a set of resources for ones that conform to a particular profile</li>
 <li>A receiver that has many profiles to choose when validating resource</li>
</ul>
<p>
Profile Tags serve these use cases - a client/creator of a resource can tag the 
resource with an assertion that the resource conforms to a particular structure definition. 
The server/receiver of the resource can choose to take this assertion at face value, or 
to assist in locating the correct <a href="structuredefinition.html">StructureDefinition</a> 
against which to validate the resource. 
</p>
<p>
Note: resources can conform to multiple profiles at once. A resource can conform to 
a profile without ever being labelled that it does, or a resource may falsely claim to conform 
to a profile. For this reason, applications processing resources SHOULD always 
depend on the contents of the resource when processing them, and/or check resources
against the <a href="structuredefinition.html">StructureDefinition</a>s directly rather 
than relying the existence of profile tags for meaning.
Profile Tags are provided as a method of finding resources that conform to 
a particular <a href="structuredefinition.html">StructureDefinition</a>, not statements of meaning about the resource.
</p>
<p>
Many trading partner agreements will make rules about what claims can be made 
and when they must be tested, which will make the profile assertion more reliable. 
</p>

<h4>Security Labels</h4>
<p>
A security label is attached to a resource to provide specific security metadata 
about the information in the resource. For further information, see 
<a href="security-labels.html">Security Labels</a>.
</p>

<h3>Further Information</h3>
<ul>
  <li><a href="conformance-rules.html">Conformance Rules</a></li>
  <li><a href="resource.html">Resource Definitions</a></li>
  <li><a href="references.html">References between Resources</a></li>
  <li><a href="narrative.html">Narratives</a></li>
  <li><a href="formats.html">Formats:</a> <a href="xml.html">XML</a>, <a href="json.html">JSON</a> </li>
  <li><a href="extensibility.html">Extensibility</a> (<a href="extensibility-examples.html">Examples</a>)</li>
  <li><a href="resource-definitions.html">Detailed Descriptions</a></li>
  <li><a href="compatibility.html">Inter-version Compatibility</a></li>
</ul>

  <script src="external/jquery/jquery.js"> </script>
<script src="jquery-ui.min.js"> </script>
<script>
 try {
   var currentTabIndex = sessionStorage.getItem('fhir-resource-tab-index');
 } catch(exception){ 
 }
 if (!currentTabIndex)
   currentTabIndex = '0';

$( '#tabs-Meta' ).tabs({ active: currentTabIndex, activate: function( event, ui ) { store(ui.newTab.index()); } });
    
     
function store(currentTab) {
  document.activeElement.blur();
  try {
    sessionStorage.setItem('fhir-resource-tab-index', currentTab);
  } catch(exception){ 
  }
  $( '#tabs-Meta' ).tabs('option', 'active', currentTab);
}     
</script>

</div>


