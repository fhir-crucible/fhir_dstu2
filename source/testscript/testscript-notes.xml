<div xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/1999/xhtml ../../schema/fhir-xhtml.xsd" xmlns="http://www.w3.org/1999/xhtml">

<!-- insert xhtml content here -->
<style>
		.xmlCode {
				border: 1px solid #CCCCCC;
				background: #F0FFFF;
				padding: 0px 2px 10px 50px;
				margin: 0;
        		margin-bottom: 20px;
				font-size: 0.9em;
		}
		xmp {
			margin: 0;
			padding: 0;
		}
</style>
<a name="notes"> </a>
	
<h2>Notes</h2>
<br/>
<h3>How Tos</h3>
<br/>

<h4 id="howToTestCreate">Test create operation</h4>
<p>To test if <a href="http.html#create">create</a> operation is properly supported on a server, run the operation as part of <a href="testscript-definitions.html#TestScript.test">TestScript.test</a>.</p>
<p>First, define the <a href="testscript-definitions.html#TestScript.fixture">fixture</a> as a <a href="references.html">reference</a> at the top of the test script.  The fixture will hold the body of the POST request:</p>
<div class="xmlCode"><xmp>
<fixture id="example-patient">
  <resource>
    <reference value="Patient/patient-example.xml"/>
  </resource>
</fixture>
</xmp></div>
<p>Note that it is illegal for the fixture to contain a resource id in a create operation.</p>
<p>Point the <a href="testscript-definitions.html#TestScript.setup.action.operation.sourceId">sourceId</a> element of the create operation to the fixture id just defined:</p>
<div class="xmlCode"><xmp>
<action>
  <operation>
    <type value="create" />
    <sourceId value="example-patient"/>
  </operation>
</action>
</xmp></div>

<p>There are two ways to verify that the create operation returned the right status code:</p>
<ol>
<li>
<p>Use <a href="testscript-definitions.html#TestScript.setup.action.assert.response">assert.response</a>:</p>
<div class="xmlCode"><xmp>
<action>
  <assert>
    <response value="created" />
  </assert>
</action>
</xmp></div>
See <a href="valueset-assert-response-code-types.html">response codes</a> for complete list.
</li>
<li>
<p>Use <a href="testscript-definitions.html#TestScript.setup.action.assert.responseCode">assert.responseCode</a> explicitly:</p>
<div class="xmlCode"><xmp>
<action>
  <assert>
    <responseCode value="201" />
  </assert>
</action>
</xmp></div>
</li>
</ol>

<hr/><!-- =========================================================================================================================================================== -->
<h4 id="howToTestSearch">Test search operation</h4>
<p>To test if <a href="http.html#search">search</a> operation is properly supported on a server, run the operation as part of <a href="testscript-definitions.html#TestScript.test">TestScript.test</a>.</p>

<p>Use the <a href="testscript-definitions.html#TestScript.setup.action.operation.resource">resource</a> element to specify the resource type and the <a href="testscript-definitions.html#TestScript.setup.action.operation.params">params</a> element to specify the search parameters:</p>
<div class="xmlCode"><xmp>
<action>
  <operation>
    <type value="search" />
    <resource value="Patient" />
    <contentType value="json" />	
    <params value="?given=John&amp;family=Doe" />
    <responseId value="R1" />
  </operation>
</action>
</xmp></div>
<p>The <a href="testscript-definitions.html#TestScript.setup.action.operation.contentType">contentType</a> element is optional and will default to "xml" which will translate to HTTP request header "Content-Type" being set to "application/xml+fhir" by test engines.  In this case, though, it was used to set it to "application/json+fhir".</p>
<p>The <a href="testscript-definitions.html#TestScript.setup.action.operation.responseId">responseId</a> element was used to store the response in a reference called "R1".  This reference will hold both the response headers and the response body.</p>
<p>Verify that the search operation returned the right status code:</p>
<div class="xmlCode"><xmp>
<action>
  <assert>
    <response value="okay" />
  </assert>
</action>
</xmp></div>
<p>See <a href="valueset-assert-response-code-types.html">response codes</a> for complete list.</p>

<p>Verify that the search operation returned the right resource type:</p>
<div class="xmlCode"><xmp>
<action>
  <assert>
    <resource value="Patient" />
  </assert>
</action>
</xmp></div>

<p>There are many ways to verify that the search operation returned the right Patient:</p>
<ol>
<li>
<p>Explicitly compare the elements to known value:</p>
<div class="xmlCode"><xmp>
<action>
  <assert>
    <path value="fhir:Patient/fhir:birthDate/@value"/>
    <sourceId value="R1"/>
    <value value="1974-12-31" />
  </assert>
</action>
</xmp></div>
<p>The <a href="testscript-definitions.html#TestScript.setup.action.assert.sourceId">sourceId</a> element is pointed to the <a href="testscript-definitions.html#TestScript.setup.action.operation.responseId">responseId</a> value of the search operation.  If no <a href="testscript-definitions.html#TestScript.setup.action.assert.sourceId">sourceId</a> is specified, then test engines will use the response of the last operation in the test script even if <a href="testscript-definitions.html#TestScript.setup.action.operation.responseId">responseId</a> was not specified in the operation.</p>
<p>The <a href="testscript-definitions.html#TestScript.setup.action.assert.path">path</a> element holds an XPath or JSONPath expression against the response body contents.</p>
</li>
<li>
<p>Compare the elements in response to elements in another fixture that is either dynamically set by <a href="testscript-definitions.html#TestScript.setup.action.operation.responseId">responseId</a> or defined statically by the <a href="testscript-definitions.html#TestScript.fixture">fixture</a> element at the top of the script:</p>
<div class="xmlCode"><xmp>
<action>
  <assert>
    <compareToSourceId value="F1"/>
    <compareToSourcePath value="fhir:Patient/fhir:birthDate/@value"/>
    <path value="fhir:Patient/fhir:birthDate/@value"/>
  </assert>
</action>
</xmp></div>
<p>This time the birthDate value in the response is compared to the birthDate value in a fixture called 'F1'.</p>
</li>
<li>
<p>Verify that the response contains all the element/content in another fixture pointed to by <a href="testscript-definitions.html#TestScript.setup.action.assert.minimumId">minimumId</a>.</p>
<div class="xmlCode"><xmp>
<action>
  <assert>
  	<minimumId value="F1"/>
    <sourceId value="R1"/>
  </assert>
</action>
</xmp></div>
<p>Test engines will parse the 'body' of the F1 fixture and verify that each element and its value matches the corresponding element in the R1 response body. In other words, R1 is verified to be a 'superset' of F1.  The resource id element in the body will be ignored during comparison.  The headers will also be ignored.</p>
<p>F1 can be statically defined or it can be the <a href="testscript-definitions.html#TestScript.setup.action.operation.responseId">responseId</a> for another operation.  If <a href="testscript-definitions.html#TestScript.setup.action.assert.sourceId">sourceId</a> is not specified, then test engines will use the response of the last operation. So the previous assertion could have been defined as:</p>
<div class="xmlCode"><xmp>
<action>
  <assert>
    <minimumId value="F1"/>
  </assert>
</action>
</xmp></div>

</li>
</ol>

<hr/><!-- =========================================================================================================================================================== -->
<h4 id="howToDeleteResourceInTeardown">Perform delete operation in teardown</h4>
<p>Test scripts should clean up resources created as part of execution. The <a href="testscript-definitions.html#TestScript.teardown">TestScript.teardown</a> operations will get executed once before the test script execution completes.</p>
<p>Here are a couple of ways to run delete operation in <a href="testscript-definitions.html#TestScript.teardown">TestScript.teardown</a>:</p>
<ol>
<li>Use <a href="http.html#2.1.0.12.1">conditional delete</a> operation in <a href="testscript-definitions.html#TestScript.teardown">TestScript.teardown</a>:
<div class="xmlCode"><xmp>
<action>
  <operation>
    <type value="delete" />
    <resource value="Patient" />
    <params value="?given=John&amp;family=Doe" />
  </operation>
</action>	
</xmp></div>
</li>
<li>
<p>Use delete operation with targetId fixture.</p>  
<p>To do that, the resource must have been created during <a href="testscript-definitions.html#TestScript.setup">TestScript.setup</a> or <a href="testscript-definitions.html#TestScript.test">TestScript.test</a>:</p>
<div class="xmlCode"><xmp>
<action>
  <operation>
    <type value="create" />
    <responseId value="create-response"/>
    <sourceId value="example-patient"/>
  </operation>
</action>
</xmp></div>

<p>As part of <a href="testscript-definitions.html#TestScript.teardown">TestScript.teardown</a>, run the delete operation with <a href="testscript-definitions.html#TestScript.setup.action.operation.targetId">targetId</a> value pointed to <a href="testscript-definitions.html#TestScript.setup.action.operation.sourceId">sourceId</a> value of the create operation:</p>
<div class="xmlCode"><xmp>
<action>
  <operation>
    <type value="delete" />
    <targetId value="create-response"/>
  </operation>
</action>
</xmp></div>
<p>Test engines will keep track of response headers and body of all operations.</p>
<p>The delete operation's targetId value is expected to correspond to the responseId of a GET operation (such as search or read) or the sourceId of a POST/PUT operation (such as create).</p>
<p>For targetId value corresponding to responseId of GET operations (such as search or read), test engines will use the resource type and id returned in the GET response body's resource to set the [type] and [id] in delete operation's URL, respectively.</p>
<p>For targetId value corresponding to responseId of POST/PUT operations (such as create), test engines will use the resource type and id returned in the POST/PUT response "Location" header to set the [type] and [id] in delete operation's URL, respectively. This is the case in the example above.</p>
<p>The targetId value cannot point to a statically defined fixture as the id in the fixture cannot be relied upon.</p>
</li>
</ol>


<hr/><!-- =========================================================================================================================================================== -->
<h4 id="howToDeleteResourceInSetup">Perform delete operation in setup</h4>
<p>Deletion of resources created during test script execution should be done using <a href="http.html#delete">delete</a> operation in <a href="testscript-definitions.html#TestScript.teardown">TestScript.teardown</a>. See <a href="#howToDeleteResourceInTeardown">Perform delete operation in teardown</a> for details.</p>
<p>There might be left-over resource instances though on the server from prior executions of the script that terminated prematurely through an error.  Resources can be deleted in <a href="http.html#setup">TestScript.setup</a> as well to ensure reliable test execution.</p>
<p>To delete a resource in setup, the server is required to support <a href="http.html#2.1.0.12.1">Conditional Delete</a> operation.</p>
<p>Use the <a href="testscript-definitions.html#TestScript.setup.action.operation.params">params</a> element to specify the search criteria for the delete operation:</p>
<div class="xmlCode"><xmp>
<action>
  <operation>
    <type value="delete" />
    <resource value="Patient" />
    <params value="?family=Doe&amp;given=Joe"/>
  </operation>
</action>
</xmp></div>
<p>Test engines will append the contents of the params element to url after [type]: "[base]/[type]<span style="color: green;font-weight: bold;">?[search parameters]"</span>.  The <a href="testscript-definitions.html#TestScript.setup.action.operation.resource">resource</a> element value ("Patient") will be used to replace [type] in the url.</p>

<hr/><!-- =========================================================================================================================================================== -->
<h4 id="howToTestDeleteOperation">Test conditional delete operation</h4>
<p>To test if a server supports <a href="http.html#2.1.0.12.1">conditional delete</a> operation, run a create operation prior to the delete using a sourceId that points to a <a href="testscript-definitions.html#TestScript.fixture">fixture</a> defined at the top of the script:</p>
<div class="xmlCode"><xmp>
<action>
  <operation>
    <type value="create" />
    <sourceId value="example-patient"/>
  </operation>
</action>
</xmp></div>

<p>Then use the <a href="testscript-definitions.html#TestScript.setup.action.operation.params">params</a> element to specify the search criteria for the delete operation:</p>
<div class="xmlCode"><xmp>
<action>
  <operation>
    <type value="delete" />
    <resource value="Patient" />
    <params value="?family=Doe&amp;given=Joe"/>
  </operation>
</action>
</xmp></div>
<p>Test engines will append the contents of the <a href="testscript-definitions.html#TestScript.setup.action.operation.params">params</a> element to url after [type]: "[base]/[type]<span style="color: green;font-weight: bold;">?[search parameters]"</span>.  The <a href="testscript-definitions.html#TestScript.setup.action.operation.resource">resource</a> element value ("Patient") will be used to replace [type] in the url.</p>

<p>To verify that the delete operation returned the right status code:</p>
<div class="xmlCode"><xmp>
<action>
  <assert>
    <operator value="in" />
    <responseCode value="200,204" />
  </assert>
</action>
</xmp></div>

<p>To verify that the resource was indeed deleted on the server, run a search using the same parameters and verify that the status code is 404 (not found):</p>
<div class="xmlCode"><xmp>
<action>
  <operation>
    <type value="search" />
    <resource value="Patient" />
    <params value="?given=John&amp;family=Doe" />
  </operation>
</action>
</xmp></div>
<div class="xmlCode"><xmp>
<action>
  <assert>
    <response value="notFound" />
  </assert>
</action>
</xmp></div>

<hr/><!-- =========================================================================================================================================================== -->
<h4 id="howToTestDeleteOperation">Test conditional create operation</h4>
<p>To test if a server supports <a href="http.html#2.1.0.13.1">conditional create</a> operation, use the 'If-None-Exist' request header:</p>
<div class="xmlCode"><xmp>
<action>
  <operation>
    <type value="create" />
    <requestHeader>
      <field value="If-None-Exist" />
      <value value="Patient?given=John&amp;Doe&amp;birthdate=1974-12-31" />
    </requestHeader>
    <sourceId value="F1" />
  </operation>
</action>
</xmp></div>
<p>The response code of 200 verifies that the resource already exists and did not get created:</p>
<div class="xmlCode"><xmp>
<action>
  <assert>
    <responseCode value="200"/>
  </assert>
</action>	
</xmp></div>

<hr/><!-- =========================================================================================================================================================== -->
<h4 id="howToTestUpdateOperation">Test update operation</h4>
<p><a href="http.html#update">Update</a> operations require a resource id.  The id must be present in the fixture (PUT body contents) as well as the URL.  The values must match.</p>

<p>Because resource ids cannot be predicted on the server, it is best to retrieve the id on a resource freshly created as part of the script</p>

<p>There are many ways to do that.  Below is a couple:</p>
<ol>
<li>
<p>Use update operation with <a href="testscript-definitions.html#TestScript.setup.action.operation.targetId">targetId</a> fixture pointing to create operation's <a href="testscript-definitions.html#TestScript.setup.action.operation.responseId">responseId</a>:</p>
<div class="xmlCode"><xmp>
<action>
  <operation>
    <type value="create" />
    <responseId value="create-response" />
    <sourceId value="example-patient"/>
  </operation>
</action>
</xmp></div>

<div class="xmlCode"><xmp>
<action>
  <operation>
    <type value="update" />
    <resource value="Patient"/>
    <responseId value="R3" />
    <sourceId value="john-doe-update"/>
    <targetId value="create-response"/>
  </operation>
</action>
</xmp></div>
<p>Test engines will keep track of response headers and body of all operations.</p>
<p>The update operation's targetId value is expected to correspond to the responseId of a GET operation (such as search or read) or the sourceId of a POST/PUT operation (such as create).</p>
<p>For targetId value corresponding to responseId of GET operations (such as search or read), test engines will use the resource type and id returned in the GET response body's resource to set the [type] and [id] in update operation's URL, respectively.  This is the case in the next example below.</p>
<p>For targetId value corresponding to responseId of POST/PUT operations (such as create and update), test engines will use the resource type and id returned in the POST/PUT response "Location" header to set the [type] and [id] in update operation's URL, respectively. This is the case in the example above.</p>
<p>The targetId value cannot point to a statically defined fixture as the id in the fixture cannot be relied upon.</p>
</li>
<li>
<p>Use update operation with <a href="testscript-definitions.html#TestScript.setup.action.operation.targetId">targetId</a> fixture pointing to search operation's <a href="testscript-definitions.html#TestScript.setup.action.operation.responseId">responseId</a>:</p>
<div class="xmlCode"><xmp>
<action>
  <operation>
    <type value="create" />
    <responseId value="R1"/>
    <sourceId value="john-doe-patient"/>  <!-- Fixture must be defined at the top of the script -->
  </operation>
</action>
</xmp></div>

<div class="xmlCode"><xmp>
<action>
  <operation>
    <type value="search" />
    <resource value="Patient"/>
    <params value="?family=Doe&amp;given=Joe"/>
    <responseId value="R2" />
  </operation>
</action>
</xmp></div>

<div class="xmlCode"><xmp>
<action>
  <operation>
    <type value="update" />
    <resource value="Patient"/>
    <responseId value="R3" />
    <sourceId value="john-doe-update"/>
    <targetId value="R2"/>
  </operation>
</action>
</xmp></div>
</li>
</ol>

<p>After the update operation, test scripts would perform at least one more read/search operation to retrieve the contents of the updated resource and then perform assertions to verify that the data did indeed get updated on the server:</p>
<div class="xmlCode"><xmp>
<action>
  <operation>
    <type value="search" />
    <resource value="Patient"/>
    <params value="?family=Doe&amp;given=Joe"/>
    <responseId value="R4" />
  </operation>
</action>
</xmp></div>
<p>Verify that the birthdate got updated and is being returned properly:</p>	
<div class="xmlCode"><xmp>
<action>
  <assert>
    <path value="fhir:Patient/fhir:birthDate/@value"/>
    <sourceId value="R4"/>
    <value value="1974-12-31" />
  </assert>
</action>	
</xmp></div>

<hr/><!-- =========================================================================================================================================================== -->
<h4 id="howToTestConditionalUpdateOperation">Test conditional update operation</h4>
<p>Unlike a regular <a href="http.html#update">update</a> operation, a <a href="http.html#2.1.0.10.1">conditional update</a> operation does not require a resource id in the URL (or the body of the PUT).</p>
<p>To test conditional update, use <a href="testscript-definitions.html#TestScript.setup.action.operation.params">params</a> element in the operation instead of <a href="testscript-definitions.html#TestScript.setup.action.operation.targetId">targetId</a>. The <a href="testscript-definitions.html#TestScript.setup.action.operation.resource">resource</a> element will be required in this case.</p>
<div class="xmlCode"><xmp>
<action>
  <operation>
    <type value="update" />
    <resource value="Patient"/>
    <params value="?family=Doe&amp;given=Joe"/>
    <responseId value="R3" />
    <sourceId value="john-doe-update"/> <!-- john-doe-update fixture will have the 'correct' birthDate -->
  </operation>
</action>
</xmp></div>
<p>Test engines will append the contents of the <a href="testscript-definitions.html#TestScript.setup.action.operation.params">params</a> element to url after [type]: "PUT [base]/[type]<span style="color: green;font-weight: bold;">?[search parameters]"</span>.  The <a href="testscript-definitions.html#TestScript.setup.action.operation.resource">resource</a> element value ("Patient") will be used to replace [type] in the URL.</p>
<p>Verify that the birthdate got updated and is being returned properly:</p>
<div class="xmlCode"><xmp>
<action>
  <operation>
    <type value="search" />
    <resource value="Patient"/>
    <params value="?family=Doe&amp;given=Joe"/>
    <responseId value="R4" />
  </operation>
</action>
</xmp></div>
<div class="xmlCode"><xmp>
<action>
  <assert>
    <path value="fhir:Patient/fhir:birthDate/@value"/>
    <sourceId value="R4"/>
    <value value="1974-12-31" />
  </assert>
</action>	
</xmp></div>
<hr/><!-- =========================================================================================================================================================== -->
<h4 id="howToTestReadOperation">Test read operation</h4>
<p>The <a href="http.html#read">read</a> operation operation requires the resource id in the URL.  Since resource ids are unpredictable on servers, it's best to create the resource within the test script prior to executing the read operation:</p>
<div class="xmlCode"><xmp>
<action>
  <operation>
    <type value="create" />
    <responseId value="create-response"/>
    <sourceId value="example-patient"/>
  </operation>
</action>
</xmp></div>

<p>One way to execute the read operation is to run the read operation with <a href="testscript-definitions.html#TestScript.setup.action.operation.targetId">targetId</a> value pointed to <a href="testscript-definitions.html#TestScript.setup.action.operation.responseId">responseId</a> value of the create operation:</p>
<div class="xmlCode"><xmp>
<action>
  <operation>
    <type value="read" />
    <targetId value="create-response"/>
  </operation>
</action>
</xmp></div>
<p>Test engines will keep track of response headers and body of all operations.</p>
<p>The read operation's targetId value is expected to correspond to the responseId of a GET operation (such as search or read) or the sourceId of a POST/PUT operation (such as create).</p>
<p>For targetId value corresponding to responseId of GET operations (such as search or read), test engines will use the resource type and id returned in the GET response body's resource to set the [type] and [id] in read operation's URL, respectively.</p>
<p>For targetId value corresponding to responseId of POST/PUT operations (such as create), test engines will use the resource type and id returned in the POST/PUT response "Location" header to set the [type] and [id] in read operation's URL, respectively.  This is the case in the example above.</p>
<p>The targetId value cannot point to a statically defined fixture as the id in the fixture cannot be relied upon.</p>
<hr/><!-- =========================================================================================================================================================== -->
<h4 id="howToTestVReadOperation">Test vread operation</h4>
<p>The <a href="http.html#vread">vread</a> operation operation requires the resource id as well as the resource version id in the URL.  Since resource ids and version ids are unpredictable on servers, it's best to create the resource within the test script prior to executing the vread operation:</p>
<div class="xmlCode"><xmp>
<action>
  <operation>
    <type value="create" />
    <responseId value="create-response"/>
    <sourceId value="example-patient"/>
  </operation>
</action>
</xmp></div>

<p>One way to execute the vread operation is to run the vread operation with <a href="testscript-definitions.html#TestScript.setup.action.operation.targetId">targetId</a> value pointed to <a href="testscript-definitions.html#TestScript.setup.action.operation.responseId">responseId</a> value of the create operation:</p>
<div class="xmlCode"><xmp>
<action>
  <operation>
    <type value="vread" />
    <targetId value="create-response"/>
  </operation>
</action>
</xmp></div>
<p>Test engines will keep track of response headers and body of all operations.</p>
<p>The vread operation's targetId value is expected to correspond to the responseId of a GET operation (such as search or read) or the sourceId of a POST/PUT operation (such as create).</p>
<p>For targetId value corresponding to responseId of GET operations (such as search or read), test engines will use the resource type, id and version id returned in the GET response body's resource to set the [type], [id] and [vid] in vread operation's URL, respectively.</p>
<p>For targetId value corresponding to responseId of POST/PUT operations (such as create), test engines will use the resource type, id and version id returned in the POST/PUT response "Location" header to set the [type], [id] and [vid] in vread operation's URL, respectively.  This is the case in the example above.</p>
<p>The targetId value cannot point to a statically defined fixture as the id in the fixture cannot be relied upon.</p>
<hr/><!-- =========================================================================================================================================================== -->
<h4 id="howToTestHistoryOperation">Test history operation</h4>
<p>The <a href="http.html#history">history</a> operation can be executed in the following ways:</p>
<ol>
<li>
<p>GET [base]/[type]/[id]/_history{?[parameters]&amp;_format=[mime-type]}</p>
<p>Here the resource id is required in the url.  This is similar to read operation if targetId elemet is used.  See <a href="#howToTestReadOperation">Test read operation</a> for details.</p>
<div class="xmlCode"><xmp>
<action>
  <operation>
    <type value="history" />
    <targetId value="create-response"/>  <!-- or search-response or update-response-->
  </operation>
</action>
</xmp></div>
<div class="xmlCode"><xmp>
<action>
  <assert>
    <resource value="Bundle"/>
  </assert>
</action>	
</xmp></div>
</li>
<li>
GET [base]/[type]/_history{?[parameters]&amp;_format=[mime-type]}
<p>Here the resource id is not required in the url.</p>
<p>Instead of <a href="testscript-definitions.html#TestScript.setup.action.operation.targetId">targetId</a> element, the <a href="testscript-definitions.html#TestScript.setup.action.operation.params">params</a> element can be used to specify the search criteria for the history operation.</p>
<p>In the following example, all history entries for John Doe patient would be returned by server:</p>
<div class="xmlCode"><xmp>
<action>
  <operation>
    <type value="history" />
    <resource value="Patient"/>
    <params value="?family=Doe&amp;given=Joe"/>
  </operation>
</action>
</xmp></div>
</li>
<li>
GET [base]/_history{?[parameters]&amp;_format=[mime-type]}
<p>Here neither the resource type nor the the resource id is required in the url.  In the following example, no more than 50 history entries would be returned by server:</p>
<div class="xmlCode"><xmp>
<action>
  <operation>
    <type value="history" />
    <params value="?_count=50"/>
  </operation>
</action>
</xmp></div>
</li>
</ol>

<hr/><!-- =========================================================================================================================================================== -->
<h4 id="howToSpecifyAcceptHeader">Specify Accept header in request</h4>
<p>The default "Accept" header that will be set on all GET operations (such as read, vread, search, history, etc.) will be "application/xml+fhir".</p>
<p>There are two ways to change the default "Accept" header:</p>
<ol>
<li>
<p>Use the <a href="testscript-definitions.html#TestScript.setup.action.operation.accept">accept</a> element:</p>
<div class="xmlCode"><xmp>
<action>
  <operation>
    <type value="read" />
    <accept value="json" />
    <targetId value="F1" />
  </operation>
</action>
</xmp></div>
<p>Test engines will set the Accept header to "application/json+fhir" if "json" is specified and will use "application/xml+fhir" if "xml" is specified.</p>
</li>
<li>
<p>Use the <a href="testscript-definitions.html#TestScript.setup.action.operation.requestHeader">requestHeader</a> element to set "Accept" <span style="font-weight:bold;">explicitly</span>:</p>
<div class="xmlCode"><xmp>
<action>
  <operation>
    <type value="read" />
    <requestHeader>
      <field value="Accept" />
      <value value="application/json+fhir" />
    </requestHeader>
    <targetId value="F1" />
  </operation>
</action>
</xmp></div>
<p>Test engines will take values specified for <a href="testscript-definitions.html#TestScript.setup.action.operation.requestHeader">requestHeader</a> "as-is" and not transform them.  This might be useful for negative testing e.g. the value can be set explicitly to "applcation/xml" or an invalid value and verify server response.</p>
</li>
</ol>

<hr/><!-- =========================================================================================================================================================== -->
<h4 id="howToSpecifyContentTypeHeader">Specify Content-Type header in request</h4>
<p>The default "Content-Type" header that will be set on all POST/PUT operations (such as create, update, etc.) will be "application/xml+fhir".</p>
<p>There are two ways to change the default "Content-Type" header:</p>
<ol>
<li>
<p>Use the <a href="testscript-definitions.html#TestScript.setup.action.operation.contentType">contentType</a> element:</p>
<div class="xmlCode"><xmp>
<action>
  <operation>
    <type value="create" />
    <contentType value="json" />
    <targetId value="F1" />
  </operation>
</action>
</xmp></div>
<p>Test engines will set the Content-Type header to "application/json+fhir" if "json" is specified and will use "application/xml+fhir" if "xml" is specified.</p>
</li>
<li>
<p>Use the <a href="testscript-definitions.html#TestScript.setup.action.operation.requestHeader">requestHeader</a> element to set Content-Type <span style="font-weight:bold;">explicitly</span>:</p>
<div class="xmlCode"><xmp>
<action>
  <operation>
    <type value="create" />
    <requestHeader>
      <field value="Content-Type" />
      <value value="application/json+fhir" />
    </requestHeader>
    <targetId value="F1" />
  </operation>
</action>
</xmp></div>
<p>Test engines will take values specified for <a href="testscript-definitions.html#TestScript.setup.action.operation.requestHeader">requestHeader</a> "as-is" and not transform them.  This might be useful for negative testing e.g. the value can be set explicitly to "applcation/xml" or an invalid value and verify server response.</p>
</li>
</ol>

<hr/><!-- =========================================================================================================================================================== -->
<h4 id="howToVerifyContentTypeHeader">Verify Content-Type header in response</h4>
<p>There are two ways to verify the "Content-Type" header in response:</p>
<ol>
<li>
<p>Use the <a href="testscript-definitions.html#TestScript.setup.action.assert.contentType">contentType</a> element:</p>
<div class="xmlCode"><xmp>
<action>
  <assert>
    <contentType value="json" />
  </assert>
</action>
</xmp></div>
<p>Test engines will verify that "application/json+fhir" is present in Content-Type header if "json" is specified and will verify that "application/xml+fhir" is present if "xml" is specified.</p>
</li>
<li>
<p>Use the <a href="testscript-definitions.html#TestScript.setup.action.assert.requestHeader">requestHeader</a> element to verify Content-Type <span style="font-weight:bold;">explicitly</span>:</p>
<div class="xmlCode"><xmp>
<action>
  <assert>
    <headerField value="Content-Type" />
    <value value="application/json+fhir" />
  </assert>
</action>
</xmp></div>
<p>Test engines will take values specified for <a href="testscript-definitions.html#TestScript.setup.action.assert.headerField">headerField</a> "as-is" and not interpret them.</p>
<p>Note that test engines will not verify contentType in response if assertions for contentType are missing.</p>
</li>
</ol>
<hr/><!-- =========================================================================================================================================================== -->
<h4 id="howToUseVariables">Use variables</h4>
<p><a href="#variables">Variables</a> can be defined against static fixtures and dynamic operation responses.  They can be used in "operation.params", "operation.requestHeader.value", "operation.url", and "assert.value" element values.  As such they allow for the data used in operations and assertions to be externally defined.  The data could be unique to each client involved in interactions with a server or could be unique to a given server database instance.  This allows for multiple clients to execute the same test scripts concurrently against the same server.</p>

<p>Variables would be defined at the top of the script.</p>

<p>Below is a variable that is defined as the Location header to the response referenced by "R1":</p>
<div class="xmlCode"><xmp>
<variable>
  <name value="V1" />
  <headerField value="Location" />
  <sourceId value="R1" />
</variable>	
</xmp></div>
<p>Test engines will not evaluate this at this point.  They will store the expresssion in "V1" and will look for "${}" in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls. </p>

<p>Here is a read operation that will use the V1 variable.  The variable expression was "Location against R1 response" (defined above).  If a prior operation has not set R1 to be the responseId of the operation, then test engine will error out.  Otherwise, V1 will be set to the Location header value of R1 response and that value will be substituted for ${V1} below.  In other words, the read will be performed against the Location header value of R1 response.</p>
<div class="xmlCode"><xmp>
<action>
  <operation>
    <type value="read" />
    <accept value="json" />
    <responseId value="R2" />
    <url value="${V1}" />
  </operation>
</action>
</xmp></div>

<p>Below are three variables defined as path expressions against the static fixture referenced by "F1". The expressions are against the given name, family name, and birthDate of a patient resource. The resource data will be managed external to the test script.</p>
<div class="xmlCode"><xmp>
<variable>
  <name value="PatientGivenName" />
  <path value="fhir:Patient/fhir:name/fhir:given/@value" />
  <sourceId value="F1" />
</variable>
<variable>
  <name value="PatientFamilyName" />
  <path value="fhir:Patient/fhir:name/fhir:family/@value" />
  <sourceId value="F1" />
</variable>
<variable>
  <name value="PatientDOB" />
  <path value="hir:Patient/fhir:birthDate/@value" />
  <sourceId value="F1" />
</variable>
</xmp></div>

<p>Again, test engines will not evaluate the path expression at this point. They will look for anything wrapped in '${}' in "operation.params", "operation.requestHeader.value", "operation.url", and "assert.value" element values and substitute the placeholders with the evaluated expressions.</p>

<p>Here is a conditional create operation that will set the requestHeader using the PatientGivenName, PatientFamilyName, and PatientDOB variables defined above.  The variable expressions were path expressions against the statically defined F1 fixture.  They will be evaluated against the fixture body (containing resource) and the corresponding values will be extracted from the fixtures and used to substitute the variables in the requestHeader value below.</p>
<div class="xmlCode"><xmp>
<action>
  <operation>
    <type value="create" />
    <requestHeader>
      <field value="If-None-Exist" />
      <value value="Patient?given=${PatientGivenName}&amp;${PatientFamilyName}&amp;birthdate=${PatientDOB}" />
    </requestHeader>
    <sourceId value="F1" />
  </operation>
</action>
</xmp></div>

<p>Here is a search operation that will perform a search using the PatientGivenName, PatientFamilyName, and PatientDOB variables defined above.  The variable expressions were path expressions against the statically defined F1 fixture.  They will be evaluated against the fixture body (containing resource) and the corresponding values will be extracted from the fixtures and used to substitute the variables in the params value below.</p>
<div class="xmlCode"><xmp>
<action>
  <operation>
    <type value="search" />
    <resource value="Patient" />
    <accept value="json" />
    <params value="?given=${PatientGivenName}&amp;family=${PatientFamilyName}&amp;birthdate=${PatientDOB}" />
    <responseId value="R3" />
  </operation>
</action>	
</xmp></div>

<p>Here are the assertions that verify that the search was successful:</p>
<div class="xmlCode"><xmp>
<action>
  <assert>
    <path value="Patient/name/given" />
    <value value="${PatientGivenName}" />
  </assert>
</action>	
<action>
  <assert>
    <path value="Patient/name/family" />
    <value value="${PatientFamilyName}" />
  </assert>
</action>
<action>
  <assert>
    <path value="Patient/birthdate" />
    <value value="${PatientDOB}" />
  </assert>
</action>
</xmp></div>

		
<hr/><!-- =========================================================================================================================================================== -->
<h4 id="howToTestServerSupportsFormat">Test server support for '_format'</h4>
<p>Servers are required to support "_format" in the request url to determine the response mime-type. See <a href="#http.html#2.1.0.6">Content Type and Encodings</a></p>
<p>Use the <a href="testscript-definitions.html#TestScript.setup.action.operation.params">params</a> element to specify the _format:</p>
<div class="xmlCode"><xmp>
<action>
  <operation>
    <type value="search" />
    <resource value="Patient"/>
    <params value="?family=Doe&amp;given=Joe&amp;_format=application/json+fhir"/>
    <responseId value="R1" />
  </operation>
</action>
</xmp></div>

<p>Use the <a href="testscript-definitions.html#TestScript.setup.action.assert.requestHeader">requestHeader</a> element to verify Content-Type <span style="font-weight:bold;">explicitly</span>:</p>
<div class="xmlCode"><xmp>
<action>
  <assert>
    <headerField value="Content-Type" />
    <value value="application/json+fhir" />
  </assert>
</action>
</xmp></div>

<hr/><!-- =========================================================================================================================================================== -->
<h4 id="howToSpecifiyCapabilities">How to specify metadata capabilities</h4>
<p>If the capabilities are supported by the server, then the TestScript can be executed.  Otherwise, the TestScript as a whole or a specific test within the test script may be skipped depending on where the capabilties section is defined.</p>
<p>Here's how to specify that the test script requires the server to support Patient create and delete operations:</p>
<div class="xmlCode"><xmp>
<metadata>
  <capabilities>
    <required value="true"/>
    <description value="Patient Create and Delete Operation"/>
    <link value="http://hl7.org/implement/standards/FHIR-Develop/http.html#create"/>
    <link value="http://hl7.org/implement/standards/FHIR-Develop/http.html#delete"/>
    <conformance>
      <reference value="/Conformance/PatientCreateDelete.xml" />
    </conformance>
  </capabilities>
</metadata>
</xmp></div>

<p>The contents of PatientCreateDelete.xml would be a minimal conformance statement to indicate what sections need to be present in server conformance statement:</p>
<div class="xmlCode"><xmp>
<Conformance xmlns="http://hl7.org/fhir">
  <rest>
    <mode value="server"/>
    <resource>
      <type value="Patient"/>
      <interaction>
        <code value="create"/>
      </interaction>
      <interaction>
        <code value="delete"/>
      </interaction>	
    </resource>
  </rest>
</Conformance>
</xmp></div>

<p>When the metadata capabiltiies section is defined at <a href="testscript-definitions.html#TestScript.metadata">TestScript.metadata</a> or at <a href="testscript-definitions.html#TestScript.setup.metadata">TestScript.setup.metadata</a>, and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then all the tests in the TestScript are skipped.</p>

<p>When the metadata capabiltiies section is defined at <a href="testscript-definitions.html#TestScript.test.metadata">TestScript.test.metadata</a> and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then only that test is skipped.</p>

<p>The "metadata.capabilities.required" and "metadata.capabilities.validated" elements only indicate whether the capabilities are the primary focus of the test script or not.  The do not impact the skipping logic.  Capabilities whose "metadata.capabilities.validated" flag is true are the primary focus of the test script.</p>

<hr/><!-- =========================================================================================================================================================== -->
<a name="ops"> </a>

<h2 id="operations-table">Operations</h2>

<p>This table presents a summary of the constraints applicable to TestScript.setup.action.operation, TestScript.test.action.operation,
and TestScript.teardown.action.operation elements. The operation elements should be configured consistently with the
<a href="http.html#2.1.0.22">FHIR RESTful API summary</a>.</p>

<table class="grid">
  <tr>
  	<th></th>
    <th>read</th>
    <th>vread</th>
    <th>search</th>
    <th>history</th>
    <th>create</th>
    <th>update</th>
    <th>transaction</th>
    <th>conformance</th>
    <th>delete</th>
  </tr>

  <tr>
    <th>params</th>
    <td>The <a href="testscript-definitions.html#TestScript.setup.action.operation.params">params</a> element can be used to specify the [id] using variable substitutions and the rest of the highlighted portion in the request URL:<br/><br/>[base]/[type]<span style="font-weight:bold">/[id] {?_format=[mime-type]}</span><br/><br/>If used, then <a href="testscript-definitions.html#TestScript.setup.action.operation.resource">resource</a> is required and <a href="testscript-definitions.html#TestScript.setup.action.operation.targetId">targetId</a> and <a href="testscript-definitions.html#TestScript.setup.action.operation.url">url</a> must not be specified.</td>
    <td>The <a href="testscript-definitions.html#TestScript.setup.action.operation.params">params</a> element can be used to specify the [id] and [vid] using variable substitutions and the rest of the highlighted portion in the request URL:<br/><br/>[base]/[type]<span style="font-weight:bold">/[id]/_history/[vid] {?_format=[mime-type]}</span><br/><br/>If used, then <a href="testscript-definitions.html#TestScript.setup.action.operation.resource">resource</a> is required and <a href="testscript-definitions.html#TestScript.setup.action.operation.targetId">targetId</a> and <a href="testscript-definitions.html#TestScript.setup.action.operation.url">url</a> must not be specified.</td>
    <td>The <a href="testscript-definitions.html#TestScript.setup.action.operation.params">params</a> element can be used to specify the highlighted portion in the request URL:<br/><br/>[base]/[type]<span style="font-weight:bold">{?[parameters]{&amp;_format=[mime-type]}}</span><br/><br/>If used, then <a href="testscript-definitions.html#TestScript.setup.action.operation.resource">resource</a> is optional and <a href="testscript-definitions.html#TestScript.setup.action.operation.targetId">targetId</a> and <a href="testscript-definitions.html#TestScript.setup.action.operation.url">url</a> must not be specified.</td>
    <td>The <a href="testscript-definitions.html#TestScript.setup.action.operation.params">params</a> element can be used to specify the [id] using variable substitutions and the rest of the highlighted portion in the following request URLs:<br/>[base]/[type]<span style="font-weight:bold">/[id]/_history{?[parameters]&amp;_format=[mime-type]}</span><br/>[base]/[type]<span style="font-weight:bold">/_history{?[parameters]&amp;_format=[mime-type]}</span><br/>[base]<span style="font-weight:bold">/_history{?[parameters]&amp;_format=[mime-type]}</span><br/><br/>If used, then <a href="testscript-definitions.html#TestScript.setup.action.operation.resource">resource</a> is optional and <a href="testscript-definitions.html#TestScript.setup.action.operation.targetId">targetId</a> and <a href="testscript-definitions.html#TestScript.setup.action.operation.url">url</a> must not be specified.</td>
	<td>N/A</td>
    <td>The <a href="testscript-definitions.html#TestScript.setup.action.operation.params">params</a> element can be used in <a href="http.html#2.1.0.10.1">conditional update</a> operation to specify the highlighted portion of the request URL:<br/><br/>[base]/[type]<span style="font-weight:bold">?[search parameters]</span><br/><br/>If used, then <a href="testscript-definitions.html#TestScript.setup.action.operation.resource">resource</a> is required and <a href="testscript-definitions.html#TestScript.setup.action.operation.targetId">targetId</a> and <a href="testscript-definitions.html#TestScript.setup.action.operation.url">url</a> must not be specified.</td>
    <td>N/A</td>
    <td>The <a href="testscript-definitions.html#TestScript.setup.action.operation.params">params</a> element can be used to specify the highlighted portion in the request URL:<br/><br/>[base]<span style="font-weight:bold">/metadata {?_format=[mime-type]}</span><br/><br/>If used, then <a href="testscript-definitions.html#TestScript.setup.action.operation.resource">resource</a> is ignored and <a href="testscript-definitions.html#TestScript.setup.action.operation.targetId">targetId</a> and <a href="testscript-definitions.html#TestScript.setup.action.operation.url">url</a> must not be specified.</td>
    <td>The <a href="testscript-definitions.html#TestScript.setup.action.operation.params">params</a> element can be used to specify the [id] using variable substitutions in the request URL:<br/><br/>[base]/[type]<span style="font-weight:bold">/[id]</span><br/><br/>If used, then <a href="testscript-definitions.html#TestScript.setup.action.operation.resource">resource</a> is required and <a href="testscript-definitions.html#TestScript.setup.action.operation.targetId">targetId</a> and <a href="testscript-definitions.html#TestScript.setup.action.operation.url">url</a> must not be specified.</td>
  </tr>
  <tr>
    <th>resource</th>
    <td colspan="4">The <a href="testscript-definitions.html#TestScript.setup.action.operation.resource">resource</a> element is required to specify the resource ([type]) in the request URL when <a href="testscript-definitions.html#TestScript.setup.action.operation.params">params</a> element is used. Will be ignored if <a href="testscript-definitions.html#TestScript.setup.action.operation.targetId">targetId</a> or <a href="testscript-definitions.html#TestScript.setup.action.operation.url">url</a> are specified.  In the case of <a href="testscript-definitions.html#TestScript.setup.action.operation.targetId">targetId</a>, the resource type will be extracted from the fixture.</td>
    <td colspan="2">If <a href="testscript-definitions.html#TestScript.setup.action.operation.targetId">targetId</a> is specified, then [type] for request URL will be determined from targetId's fixture and <a href="testscript-definitions.html#TestScript.setup.action.operation.resource">resource</a> element will be ignored. Otherwise, resource type will be extracted from <a href="testscript-definitions.html#TestScript.setup.action.operation.sourceId">sourceId</a>'s fixture if specified.  For <a href="http.html#2.1.0.10.1">conditional updates</a>, <a href="testscript-definitions.html#TestScript.setup.action.operation.resource">resource</a> is required.</td>
    <td>N/A</td>
    <td>N/A</td>
    <td>If <a href="testscript-definitions.html#TestScript.setup.action.operation.targetId">targetId</a> is specified, then [type] for request URL will be determined from <a href="testscript-definitions.html#TestScript.setup.action.operation.targetId">targetId</a> and <a href="testscript-definitions.html#TestScript.setup.action.operation.resource">resource</a> element will be ignored. For <a href="http.html#2.1.0.12.1">conditional deletes</a>, <a href="testscript-definitions.html#TestScript.setup.action.operation.resource">resource</a> is required.</td>
  </tr>
  <tr>
    <th>sourceId</th>
    <td>N/A</td>
    <td>N/A</td>
    <td>N/A</td>
    <td>N/A</td>
    <td>The <a href="testscript-definitions.html#TestScript.setup.action.operation.sourceId">sourceId</a> element points to a fixture to be used for the created resource.  The fixture cannot contain the id element.</td>
    <td>The <a href="testscript-definitions.html#TestScript.setup.action.operation.sourceId">sourceId</a> element points to a fixture to be used for the updated resource.  Has to correspond to the <a href="testscript-definitions.html#TestScript.setup.action.operation.responseId">responseId</a> of an operation executed upstream in the test script.  The response body must contain a resource with a resource id.  The sourceId fixture cannot be statically defined because the id cannot be relied upon.</td>
    <td>Fixture to be used for the transaction.  Has to be a <a href="#bundle.html">Bundle</a>.</td>
    <td>N/A</td>
    <td>N/A</td>
  </tr>
  <tr>
    <th>targetId</th>
    <td>The <a href="testscript-definitions.html#TestScript.setup.action.operation.targetId">targetId</a> element can be used to specify the [type] and [id] in the request URL.<br/><br/>If used, then <a href="testscript-definitions.html#TestScript.setup.action.operation.params">params</a> and <a href="testscript-definitions.html#TestScript.setup.action.operation.url">url</a> must not be specified.<br/><br/>The targetId value has to correspond to the responseId of an operation executed upstream in the test script.  The response body must contain a reosurce with a resource id.  The targetId fixture cannot be statically defined because the id cannot be relied upon.</td>
    <td>The <a href="testscript-definitions.html#TestScript.setup.action.operation.targetId">targetId</a> element can be used to specify the [type], [id], and [vid] in the request URL.<br/><br/>If used, then <a href="testscript-definitions.html#TestScript.setup.action.operation.params">params</a> and <a href="testscript-definitions.html#TestScript.setup.action.operation.url">url</a> must not be specified.<br/><br/>The targetId value has to correspond to the responseId of an operation executed upstream in the test script.  The response body must contain a reosurce with a resource id.  The targetId fixture cannot be statically defined because the id and vid cannot be relied upon.</td>
    <td>The <a href="testscript-definitions.html#TestScript.setup.action.operation.targetId">targetId</a> element cannot be used as it's not allowed with <a href="testscript-definitions.html#TestScript.setup.action.operation.params">params</a> element</td>
    <td>The <a href="testscript-definitions.html#TestScript.setup.action.operation.targetId">targetId</a> element can be used to specify the [type], [id], and [vid] in the request URL.<br/><br/>If used, then <a href="testscript-definitions.html#TestScript.setup.action.operation.params">params</a> and <a href="testscript-definitions.html#TestScript.setup.action.operation.url">url</a> must not be specified.<br/><br/>The targetId value has to correspond to the responseId of an operation executed upstream in the test script.  The response body must contain a reosurce with a resource id.  The targetId fixture cannot be statically defined because the id and vid cannot be relied upon.</td>
	<td>N/A. The [type] for the request URL will be extracted from <a href="testscript-definitions.html#TestScript.setup.action.operation.sourceId">sourceId</a>.</td>
	<td>N/A. The [type] for the request URL will be extracted from <a href="testscript-definitions.html#TestScript.setup.action.operation.sourceId">sourceId</a>.</td>
	<td>N/A.</td>
	<td>N/A.</td>
	<td>The <a href="testscript-definitions.html#TestScript.setup.action.operation.targetId">targetId</a> element can be used to specify the [type] and [id] in the request URL.<br/><br/>If used, then <a href="testscript-definitions.html#TestScript.setup.action.operation.params">params</a> and <a href="testscript-definitions.html#TestScript.setup.action.operation.url">url</a> must not be specified.<br/><br/>The targetId value has to correspond to the responseId of an operation executed upstream in the test script.  The response body must contain a reosurce with a resource id.  The targetId fixture cannot be statically defined because the id cannot be relied upon.</td>
  </tr>
  <tr>
    <th>responseId</th>
    <td colspan="8">The <a href="testscript-definitions.html#TestScript.setup.action.operation.responseId">responseId</a> element can be used to reference the operation response containing response body and headers.  If specified, the value can later be used in assertion <a href="testscript-definitions.html#TestScript.setup.action.operation.sourceId">sourceId</a> to evaluate <a href="testscript-definitions.html#TestScript.setup.action.assert.path">path</a> (XPath/JSONPath) and <a href="testscript-definitions.html#TestScript.setup.action.assert.headerField">headerFields</a> against the response received for an operation.</td>
    <td>N/A</td>
  </tr>
  <tr>
    <th>accept</th>
    <td colspan="8">The <a href="testscript-definitions.html#TestScript.setup.action.operation.accept">accept</a> element can be used to specify the "Accept" header in the outgoing HTTP request. If "json" is specified, then "Accept" value of "application/json+fhir" will be set in the request header. If "xml" is specified, then "application/xml+fhir" will be used.</td>
    <td>N/A</td>
  </tr>
  <tr>
    <th>contentType</th>
    <td colspan="8">The <a href="testscript-definitions.html#TestScript.setup.action.operation.contentType">contentType</a> element can be used to specify the "Content-Type" header in the outgoing HTTP request. If "json" is specified, then "Content-Type" value of "application/json+fhir" will be set in the request header. If "xml" is specified, then "application/xml+fhir" will be used.</td>
    <td>N/A</td>
  </tr>
  <tr>
    <th>requestHeader</th>
    <td colspan="9">The <a href="testscript-definitions.html#TestScript.setup.action.operation.requestHeader">requestHeader</a> element allows for request headers to be specified <span style="font-weight: bold;">explicitly</span>.  Test engines will take values specified for <a href="testscript-definitions.html#TestScript.setup.action.operation.requestHeader">requestHeader</a> "as-is" and not transform them.  This allows for testing using:
		<ul>
		<li>"If-Modified-Since" and "If-None-Match" headers. See <a href="http.html#2.1.0.5.1">Conditional read</a>.</li>
		<li>"If-Match" header. See <a href="http.html#2.1.0.11">Managing resource contention</a>.</li>
		<li>Conditional Create using "If-None-Exist". See <a href="http.html#2.1.0.13.1">Conditional Create</a>.</li>
		<li>Invalid "Content-Type" header for negative testing.</li>
		<li>etc.</li>
		</ul>
	</td>
  </tr>
  <tr>
    <th>destination</th>
    <td colspan="9">If the TestScript is testing more than one FHIR server simultaneously, the <a href="testscript-definitions.html#TestScript.setup.action.operation.destination">destination</a> identifies which server the operation applies to using zero-based indexing.</td>
  </tr>  
  <tr>
    <th>url</th>
    <td colspan="9">The <a href="testscript-definitions.html#TestScript.setup.action.operation.url">url</a> element will contain the full HTTP URL for the operation. This should rarely be used in test scripts.  One possible application would be to test if the Location header returned in a response is pointing to an expected resource.  See <a href="testscript-search.xml.html">testscript-search example</a>.</td>
  </tr>
</table>

<a name="assert"> </a>

<h2 id="assertion-table">Assertions</h2>
<table class="grid">
  <tr>
  	<th>Assertion</th>
    <th>Valid operator values</th>
    <th>Description</th>
  </tr>
  <tr>
  	<td>contentType</td>
    <td>equals | notEquals | contains | notContains</td>
    <td>Asserts that the "Content-Type" in response header is or is not the specified value for <a href="testscript-definitions.html#TestScript.setup.action.assert.contentType">contentType</a> element depending on the operator used.</td>
  </tr>
  <tr>
  	<td>headerField</td>
    <td>equals | notEquals | in | notIn | greaterThan | lessThan | empty | notEmpty | contains | notContains</td>
    <td>Asserts that the header specified for <a href="testscript-definitions.html#TestScript.setup.action.assert.headerField">headerField</a> element in the response contains, not contains, is equal, not equal, in, not in, greater than, or less than the value specified for <a href="testscript-definitions.html#TestScript.setup.action.assert.value">value</a> element if present.<br/>If the <a href="testscript-definitions.html#TestScript.setup.action.assert.operator">operator</a> is "empty" or "notEmpty" then <a href="testscript-definitions.html#TestScript.setup.action.assert.value">value</a> will be ignored.<br/>If <a href="testscript-definitions.html#TestScript.setup.action.assert.sourceId">sourceId</a> is not specified, then <a href="testscript-definitions.html#TestScript.setup.action.assert.headerField">headerField</a> will be evaluated against the last operation's response headers.</td>
  </tr>
  <tr>
  	<td>minimumId</td>
    <td>N/A</td>
    <td>Asserts that the response contains all the element/content in another fixture pointed to by <a href="testscript-definitions.html#TestScript.setup.action.assert.minimumId">minimumId</a> element. This can be a statically defined <a href="testscript-definitions.html#TestScript.fixture">fixture</a> or one that is dynamically set via <a href="testscript-definitions.html#TestScript.setup.action.operation.responseId">responseId</a>.</td>
  </tr>
  <tr>
  	<td>navigationLinks</td>
    <td>N/A</td>
    <td>Asserts that the response Bundle contains or does NOT contain first, last, and next links depending on whether or not <a href="testscript-definitions.html#TestScript.setup.action.assert.navigationLinks">navigationLinks</a> element is set to true or false.</td>
  </tr>
  <tr>
  	<td>path</td>
    <td>equals | notEquals | in | notIn | greaterThan | lessThan | empty | notEmpty | contains | notContains</td>
    <td>Asserts that <a href="testscript-definitions.html#TestScript.setup.action.assert.path">path</a> against the response body evaluates to a value that contains, not contains, is equal, not equal, in, not in, greater than, or less than the value specified for <a href="testscript-definitions.html#TestScript.setup.action.assert.value">value</a> element if present.<br/>If the <a href="testscript-definitions.html#TestScript.setup.action.assert.operator">operator</a> is "empty" or "notEmpty" then <a href="testscript-definitions.html#TestScript.setup.action.assert.value">value</a> will be ignored.<br/>If <a href="testscript-definitions.html#TestScript.setup.action.assert.sourceId">sourceId</a> is not specified, then <a href="testscript-definitions.html#TestScript.setup.action.assert.path">path</a> will be evaluated against the last operation's response body.</td>
  </tr>
  <tr>
  	<td>compareToSourcePath</td>
    <td>equals | notEquals</td>
    <td>Asserts that <a href="testscript-definitions.html#TestScript.setup.action.assert.compareToSourcePath">compareToSourcePath</a> against the response body of <a href="testscript-definitions.html#TestScript.setup.action.assert.compareToSourceId">compareToSourceId</a> fixture evaluates to a value that is equal or notEqual to the evaluated value of <a href="testscript-definitions.html#TestScript.setup.action.assert.path">path</a> which must be present also.</td>
  </tr>
  <tr>
  	<td>resource</td>
    <td>equals | notEquals</td>
    <td>Asserts that the resource returned in the response body is or is not of the specified value for <a href="testscript-definitions.html#TestScript.setup.action.assert.resource">resource</a> element.</td>
  </tr>
  <tr>
  	<td>response</td>
    <td>equals | notEquals</td>
    <td>Asserts that status code in the response is or is not one of the enumerated values in <a href="valueset-assert-response-code-types.html">response abbreviations</a>.</td>
  </tr>
  <tr>
  	<td>responseCode</td>
    <td>equals | notEquals | in | notIn | greaterThan | lessThan</td>
    <td>Asserts that status code in the response is equal, notEqual, in, not in, greater than, or less than the specified value(s) for <a href="testscript-definitions.html#TestScript.setup.action.assert.responseCode">responseCode</a> element</td>
  </tr>
  <tr>
  	<td>validateProfileId</td>
    <td>N/A</td>
    <td>Asserts that the response is valid according to the profile specified by <a href="testscript-definitions.html#TestScript.setup.action.assert.validateProfileId">validateProfileId</a> element.</td>
  </tr>
</table>

</div>
