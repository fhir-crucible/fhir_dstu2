<div xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/1999/xhtml ../../schema/fhir-xhtml.xsd" xmlns="http://www.w3.org/1999/xhtml">

<h3>Operations defined as part of this Specification</h3>

<%operationslist%>

<h3>Executing Operations and Named Queries</h3>

<p>
Operations are executed by POSTing to a URL that is <a href="operations.html">defined by the operation definition</a>.
Named Queries are executed by performing a <a href="search.html">search</a> with the value of the search parameter
"_query" set to the name provided in the definition. 
</p>
<p>
If the named query is to be performed over the RESTful API, all the parameters must be simple search parameters,
so that they can be represented directly in the URL without tricky encoding issues. Named queries always 
return a bundle containing a set of resources, so all the out parameters must be 
resources, not data types etc.
</p>
 
<h3>Passing Resources to Operations</h3> 

<p>
There are two ways to pass resources to an operation - directly, or by reference.
Since the two forms havevery different behaviors and consequences, the definition of 
an Operation distinguishes between these two. 
</p>
<p>
As an example, take the <a href="questionnaire-operations.html#populate">Questionnaire.$populate operation</a>.  
This operation takes a questionnaire as a direct parameter. The type of the parameter is 
defined as 'Questionnaire'. In a parameters resource, it would be represented like this:
</p>
<pre class="xml">
  &lt;parameter&gt;
    &lt;name value=&quot;questionnaire&quot;/&gt;
    &lt;resource&gt;
      &lt;Questionnaire&gt;
        &lt;!-- Questionnaire contents --&gt;
      &lt;/Questionnaire&gt;
    &lt;/resource&gt;
  &lt;/parameter&gt; 
</pre>
<p>
or, in JSON:
</p>
<pre>
 "parameter": [
    {
      "name": "questionnaire",
      "resource": {
        "resourceType": "Questionnaire",
        // Questionnaire contents 
      }
    }
  ]
</pre>

<p>
Other parameters are passed by reference. For example, the populate takes a 
set of references to other resources that should be used to pre-populate the 
questionnaire. These are passed by reference, and the type of the 
parameter is 'Reference(Any)' - a reference to any kind of resource.
In a parameters resource, it would be represented like this: 
</p>
<pre class="xml">
  &lt;parameter&gt;
    &lt;name value=&quot;content&quot;/&gt;
    &lt;valueReference&gt;
      &lt;reference value="Patient/123"&gt;
      &lt;/Questionnaire&gt;
    &lt;/valueReference&gt;
  &lt;/parameter&gt; 
</pre>
<p>
or, in JSON:
</p>
<pre>
 "parameter": [
    {
      "name": "questionnaire",
      "valueReference" : {
        "reference" : "Patient/123"
      }
    }
  ]
</pre>

<p>
Some operations can take either form; in that case, two different parameters
must be defined, one for a resource directly, and one for a reference.
</p>

<h3>Renaming OperationDefinition.name</h3>

<p>
It's possible for two different organisations to create different operation definitions that 
have the same name (or, perhaps more likely, to define equivalent operations that have the 
same name but incompatible approaches in their parameter lists). 
</p>
<p>
It's also possible (though a little unlikely) that a server will be required to support both of 
these operations. Should this be the case, the server is able to do this by giving on of them
a new name, and then referring to it by definition in the conformance statement. To illustrate
this, let's assume that two different organisations (orgA and orgB) both define an operation 
called "dothis", and the definitions are incompatible. OrgA publishes its operation
definition at http://orga.com/fhir/dothis.xml, and OrgB publishes its operation at 
http://fhir.orgb.com/meta/OperationDefinition/dothis. The server is able to implement
both. Its conformance statement will say:
</p>
<pre class="xml">
&lt;Conformance xmlns=&quot;http://hl7.org/fhir&quot;&gt;
  &lt;!-- snip --&gt;
  &lt;rest&gt;
    &lt;!-- snip --&gt;
    &lt;operation&gt;
      &lt;name value=&quot;dothis&quot;/&gt;
      &lt;definition&gt;
        &lt;reference value=&quot;http://orga.com/fhir/dothis.xml&quot;/&gt;
      &lt;/definition&gt;
    &lt;/operation&gt;
    &lt;operation&gt;
      &lt;name value=&quot;dothis2&quot;/&gt;
      &lt;definition&gt;
        &lt;reference value=&quot;http://fhir.orgb.com/meta/OperationDefinition/dothis&quot;/&gt;
      &lt;/definition&gt;
    &lt;/operation&gt;
    &lt;!-- snip --&gt;
  &lt;/rest&gt;
  &lt;!-- snip --&gt;
&lt;/Conformance&gt;
</pre>
<p>
If a general purpose cross server client is looking for the implementation of the 
http://fhir.orgb.com/meta/OperationDefinition/dothis operation, and wants to be
robust against this name clash problem, instead of simply executing the $dothis
operation, it can look at the server's conformance statement for the underlying
definition URI, and then execute the name given in the conformance statement.
</p>

<h3>Determining System Compatibility</h3>

<p>
A client can determine the compatiblity of the server by iterating its conformance
statement and seeing whether any of the operations it declares to support source
from the same definitions as those the client depends on, and whether the paramters
it uses are supported by the server. A client that does this can report a useful 
error to the user rather than allowing mystifying operational errors to occur.
</p>
<p>
Note, however, that there are fundamental limitations to this approach because 
there are many aspects of these operations that aren't (and can't be) defined 
in a formal fashion.  (For example, co-occurrence constraints amongst parameters.)
</p>
<p>
In the same sense, a 3rd party tool can examine the conformance statements from 
a server and a client definition of an acceptable server and confirm whether
those two system are would be unable to interoperate.
</p>

<h3>Dynamically Generating Forms</h3>

<p>
Finally, it is possible to generate user interface forms automatically from 
the operation definitions. The documentation in the form definition 
and the parameter documentation should be sufficiently useful to allow
moderately technical users to guess at the correct content of the form.
For this reason, highly technical documentation should go in OperationDefinition.notes.
</p>
<p>
Note also this is not expected to a be a tool of use to typical healthcare
end-users; such users will usually need more support than can be offered
in a generated form. 
</p>

</div>
