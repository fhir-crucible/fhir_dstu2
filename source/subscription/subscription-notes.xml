<div xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/1999/xhtml ../../schema/fhir-xhtml.xsd" xmlns="http://www.w3.org/1999/xhtml">


<h2>Safety and Security</h2>
<p>
Executing each of the channels documented below involves the server
sending a communication that will reveal information about the 
client and server relatinoship, and, if the entire resource is 
sent, administrative or clinical information that may be quite 
sensitive and/or protected under law. Servers are responsible
for ensuring appropriate security is employed for each channel. 
The subscription resource does not address these concerns 
directly - it is assumed that these are administered by other 
configuration. For instance, a server might maintain a whitelist 
of acceptable servers for the rest-create/rest-update methods.
</p>
<p>
Emails should generally be secured using some technique such as 
<a href="http://directproject.org/">Direct</a>.
</p>

<h2>Managing Subscriptions and Errors</h2>
<p>
A subscription is defined by creating the subscription on the server.
When the subscription is created by the client, it sets the status
to "requested". After POSTing the subscription, the client parses 
the Location header and saves the new Subscription's logical id for 
use in subsequent operations.
</p>
<p>
The criteria is subject to the same limitations as the client that
created it, such as access to patient compartments etc. Note that the
subscription remains active after the client access tokens expire.
</p>
<p>
Once the server has activated the subscription, it sets the status
to "active" (note: the server can do this as it accepts the resource
if it wants). 
</p>
<p>
An appropriately authorized client can use search and/or history operations
to see what subscriptions are currently active on the server.
Once the subscription is no longer desired, the client deletes the 
subscription from the server.
</p>
<p>
The server may retry the notification a fixed number of times and/or
refer errors to its own alert logs. If the notification fails, the 
server should set the status to 'error', and mark the error in the 
resource. If the notification succeeds, the server should update
the status to "active again. If a subscription fails consistently 
a server may choose set the subscription status to off, and stop
trying to send notifications.
</p>
<p>
If a subscription nominates a fixed end date, the server automatically
deletes it at the specified time.
</p>
 

<h2>Channels</h2>

<h3>REST Hook</h3>

<p>
This uses an empty POST message to alert the client that new results 
are available.
</p>
<pre class="json">
POST /Subscription

{
  "resourceType": "Subscription",
  "criteria": "/Observation?name=http://loinc.org|1975-2&amp;_format=json",
  "channel": {
    "type": "rest-hook",
    "url": "https://biliwatch.com/customers/mount-auburn-miu/on-result",
    "payload": false,
    "header": ["Authorization: Bearer secret-token-abc-123"]
  }
}
</pre>
<p>
When a resource is created or updated that meets the criteria, the server
sends a POST request with no body to the nominated URL.
</p>
<p>
When the client receives a POST to https://biliwatch.com/customers/mount-auburn-miu/on-result, 
it re-issues the criteria as a query to the server, appending &amp;_since=:last (where :last is 
replaced by the time at which the client last checked). In this way it can fetch all new 
relevent <a href="observation.html">Observations</a>.
</p>
<p>
Since payload is false, the data in the resources is only available through 
the REST API, which helps consolidate authorization and authentication logic. The 
server must append the headers, if any are given, to the POST request that it 
makes to the client.
</p>
<p>
Alternatively, the server can be asked to send the entire 
resource to a nominated FHIR end point. This is usually appropriate
for defining routing rules within a managed eco-system such
as a healthcare institution. 
</p>

<pre class="json">
  "channel": {
    "type": "rest-hook",
    "url": "https://internal.acme.com/research/saturn",
    "payload": true
  }
</pre>

<p>
This requests that a server forward a copy of any
matching resource to the nominated server as an <a href="http.html#update">Update 
operation</a> using the nominated URL as the <a href="http.html#root">service base</a>. 
In order to execute this channel, the server must know how 
to authenticate appropriately with the destination 
server. This can be done by the client providing 
an authentication header for the server to use, or 
alternatively, the server may be specifically configured to be able to use
the nominated server.
</p>



<h3>WebSockets</h3>

<p>
Subscriptions are created exclusively via the FHIR REST API. But notifications need not 
occur via REST. Indeed, some clients may be unable to expose an outward-facing HTTP 
server to receive triggered notifications. For example, a pure client-side Web app or 
mobile app may want to subscribe to a data feed without polling using the /history 
operation. This can be accomplished using a websocket notification channel.
</p>

<p>
A client can declare its intention to listen via Web Sockets:
</p>

<pre class="json">
  "channel": {
    "type": "webSocket"
  }
</pre>

<p>
The client would then initiate a Web Socket connection to the server, at a URL advertised 
in the FHIR server's conformance statement (subscriptions/webSocketUrl (todo)). A simple 
protocol is used to listen for notifications:
</p>
<ul>
 <li>Client connects a secure Web Socket to the hospital's webSocketUrl.</li>
 <li>Client authenticates to server using a server-specified Web socket protocol (e.g. OAuth bearer token presentation).</li>
 <li>Client sends a bind :id message over the socket (using the logical id of the subscription). For example, the client might issue: bind 123).</li>
 <li>Server responds with a "bound :id" message to acknowledge.</li>
 <li>Server sends a "ping :id" message to notify the client each time a new result is available</li>
</ul>

<h3>Email/SMS</h3>

A client can register for its user to receive notifications by
email:

<pre class="json">
  "channel": {
    "type": "email",
    "url": "mailto:mt-auburn-results@direct.biliwatch.com",
    "header": "A new bilirubin result has arrived!"
  }
</pre>

<p>
The server would send a new message for each matching resource.
The body of the email may be empty, or it may contain a refernce
to the search or the matching resource. It is at the discretion
of the server as to how much information to provide. The email
should be secured appropriately, such as using Direct, as specified
by the rules of the applicable jurisdictions.
</p>

<p>SMS works very similarly:</p>

<pre class="json">
  "channel": {
    "type": "sms",
    "url": "tel:+1555-345-5555"
  }
</pre>

<p>
Note: SMS messages are extremely limited in size, so payload should be set to false,
and most servers will refuse to send payloads in SMS. 
</p>

<h3>Messaging</h3>

<p>
Todo
</p>

</div>
